{"componentChunkName":"component---src-pages-index-jsx","path":"/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"☀️ 테스트 환경 OpenJDK 17.0.2 Spring Boot 3.0.5 ✋ 들어가며 JWT를 구현하는 중에 내장 톰캣이 시작되지 못했다는 아주 기분나쁜 에러를 만났다. , \n필자가 겪은 문제는 JWT Filter와 AOP의 조합에서 문제가 생겼는데 오류의 원인과 해결방법을 공유하보려고 한다. ‼️ 문제의 재구성 실제로 겪었던 문제를 다시 살펴보기 위해서…","fields":{"slug":"/spring-jwt-aop-log-null-error/"},"frontmatter":{"date":"April 04, 2025","title":"Spring AOP + JWT logger is null 수정","tags":["spring","springboot","aop","jwt","error"],"emoji":"🧨","series":null},"rawMarkdownBody":"\r\n## ☀️ 테스트 환경\r\n> - OpenJDK 17.0.2\r\n> - Spring Boot 3.0.5\r\n\r\n\r\n## ✋ 들어가며\r\nJWT를 구현하는 중에 내장 톰캣이 시작되지 못했다는 아주 기분나쁜 에러를 만났다. `\"this.logger\" is null`, `Unable to start embedded Tomcat`\r\n필자가 겪은 문제는 JWT Filter와 AOP의 조합에서 문제가 생겼는데 오류의 원인과 해결방법을 공유하보려고 한다.\r\n---\r\n\r\n## ‼️ 문제의 재구성\r\n실제로 겪었던 문제를 다시 살펴보기 위해서 아래와 같은 문제의 소스를 다시 만들어봤다.\r\nAOP에서는 `PointCut`의 범위를 `JwtAuthenticationFilter`까지 포함할 수 있도록 패키지내 모든 클래스에 진입할때 로그가 발생하도록 작성했다. (이유를 알고 봐도 크게 문제가 없어보인다.)\r\n\r\n#### ***문제의 소스코드***\r\n\r\n1. Spring Security에서 JWT 토큰 인증을 위한 필터. `OncePerRequestFilter`를 상속\r\n    ```java\r\n    @Slf4j\r\n    public class JwtAuthenticationFilter extends OncePerRequestFilter {\r\n        private final JwtUtil jwtUtil;\r\n        private final UserDetailsService userDetailsService;\r\n    ...\r\n    ```\r\n\r\n2. 패키지내 클래스에 진입할 때 로그를 찍는 AOP\r\n    ```java\r\n    @Pointcut(\"execution(* com.sample..*(..))\")\r\n    public void logPointcut() {}\r\n    \r\n    @Before(\"logPointcut()\")\r\n    public void doLog(JoinPoint joinPoint) {\r\n        log.debug(\"[ENTER] \" + joinPoint.getSignature());\r\n    }\r\n    ...\r\n    ```\r\n\r\n#### ***에러 내용***\r\n- 실행하면 내장 톰캣이 올라오지 않고 아래와 같은 에러가 발생한다. 다시 봐도 기분이 몹시 나쁘다. `\"this.logger\" is null`, `Unable to start embedded Tomcat`\r\n    ```java\r\n    Cannot invoke \"org.apache.commons.logging.Log.isDebugEnabled()\" because \"this.logger\" is null\r\n    \r\n    Caused by: java.lang.NullPointerException: Cannot invoke \"org.apache.commons.logging.Log.isDebugEnabled()\" because \"this.logger\" is null\r\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109)\r\n        at com.sample.security.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:42)\r\n        at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:209)\r\n        at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)\r\n    \r\n    Caused by: org.springframework.context.ApplicationContextException: Unable to start web server\r\n        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:164)\r\n    \r\n    Caused by: org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat\r\n        at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:142)\r\n    ```\r\n---\r\n\r\n## ❓왓 더 Logger가 왜 Null인데\r\n\r\nSpring Security + JWT + AOP 조합에서 `JwtAuthenticationFilter`가 AOP `PointCut`의 범위에 포함되는 순간 에러가 발생한다.\r\n\r\n- Spring AOP는 메서드를 가로채기 위해 프록시 객체를 생성한다.\r\n- AOP는 클래스의 메서드만 프록시로 감싸고, 필드는 복제하지 않는다.\r\n- `JwtAuthenticationFilter`에서 상속받고 있는 `OncePerRequestFilter` 클래스에는 ```if (logger.isDebugEnabled()) {``` 구문이 존재한다.\r\n- 필드는 복제되지 않기 때문에 `logger.isDebugEnabled()` 호출 시 `\"this.logger\" is null`\r\n- 결국 내장 톰캣은 실행되지 못하고 `Unable to start embedded Tomcat`을 내뱉는다.\r\n\r\n---\r\n\r\n## ✅ 해결: AOP Pointcut에서 필터 제외시키기\r\n\r\nAOP 대상에서 `JwtAuthenticationFilter`를 명시적으로 제외시켜주는걸로 톰캣이 다시 살아났다.\r\n\r\n```java\r\n@Pointcut(\r\n        \"(execution(* com.sample..*(..)))\" \r\n        + \" && !within(com.sample.security.filter.JwtAuthenticationFilter)\"\r\n)\r\npublic void logPointcut() {}\r\n\r\n    @Before(\"logPointcut()\")\r\n    public void doLog(JoinPoint joinPoint) {\r\n        log.debug(\"[ENTER] \" + joinPoint.getSignature());\r\n    }\r\n    ...\r\n```\r\n\r\n---\r\n\r\n## 👋 마치며\r\n로컬 환경에서도 로그 레벨을 `error`로 해두고 개발을 하다가 콘솔에  \r\n`[Cannot invoke... is null]`이 찍히지 않아서 문제를 정확하게 파악하지 못하고 있었다.\r\n옆자리 은인에게 도움을 받아서 해결.. (결국 로그 레벨의 중요성을 이제야 깨달은 멍청한 나의 탓)"},{"excerpt":"☀️ 테스트 환경 OpenJDK 17.0.2 Gradle 8.0.2 Spring Boot 3.0.5 ✋ 들어가며 API 권한 관리 화면을 만들기 위해서 전체 API의 전체 목록을 조회해야 하는 상황이 생겨버렸다. 첫번째로 생각했던 방법은 프로젝트에 설정되어있는 스웨거 화면을 크롤링하는 것이었는데 스웨거가 없는 환경에서도 언젠가 활용할지도 모른다는 생각에 이…","fields":{"slug":"/spring-get-api-list/"},"frontmatter":{"date":"April 03, 2025","title":"Spring Annotation 값 읽기 (API 전체 목록 조회)","tags":["spring","springboot","annotation"],"emoji":"📖","series":null},"rawMarkdownBody":"\r\n## ☀️ 테스트 환경\r\n> - OpenJDK 17.0.2\r\n> - Gradle 8.0.2\r\n> - Spring Boot 3.0.5\r\n\r\n## ✋ 들어가며\r\nAPI 권한 관리 화면을 만들기 위해서 전체 API의 전체 목록을 조회해야 하는 상황이 생겨버렸다.\r\n\r\n첫번째로 생각했던 방법은 프로젝트에 설정되어있는 스웨거 화면을 크롤링하는 것이었는데 스웨거가 없는 환경에서도 언젠가 활용할지도 모른다는 생각에 이 포스팅의 목적인 두번째 아이디어를 실행하기로 했다.\r\n\r\n## 💡 아이디어\r\n\r\n#### ***API가 구성된 패턴***\r\n내가 뽑아와야할 API는 주소와 메소드를 확인할 수 있도록 아래와 같은 형태로 구성이 되어있다.\r\n```java\r\n@RequestMapping(\"/api\")\r\npublic class SampleController {\r\n   @GetMapping(value = \"/v1/get\", produces = MediaType.APPLICATION_JSON_VALUE)\r\n   public ... {}\r\n    \r\n   @PostMapping(value = \"/v1/post\", produces = MediaType.APPLICATION_JSON_VALUE)\r\n   public ... {}\r\n   \r\n   @PutMapping(value = \"/v1/put\", produces = MediaType.APPLICATION_JSON_VALUE)\r\n   public ... {}\r\n    \r\n   @DeleteMapping(value = \"/v1/delete\", produces = MediaType.APPLICATION_JSON_VALUE)\r\n   public ... {}\r\n}\r\n```\r\n\r\n#### ***만들어내고 싶은 데이터의 모습***\r\n\r\n| className                   | apiUrl         | httpMethod |\r\n|-----------------------------|----------------|------------|\r\n| com.sample.SampleController | /api/vi/get    | GET        |\r\n| com.sample.SampleController | /api/vi/post   | POST       |\r\n| com.sample.SampleController | /api/vi/delete | DELETE     |\r\n| com.sample.SampleController | /api/vi/put    | PUT        |\r\n\r\n#### ***그래서 어떻게 만들건데?***\r\n패키지내 모든 클래스와 메소드를 순회하면서\r\n`@RequestMapping`, `@GetMapping`, `@PostMapping`, `@DeleteMapping`, `@PutMapping`에 포함된 값을 읽어오는 클래스를 만들어보자\r\n\r\n\r\n## 💿 실현된 아이디어\r\n설명을 좀 해보려고 했는데 `com.sample` 패키지 내 모든 컨트롤러 또 컨트롤러 하위에 있는 메소드들을 모두 스캔하면서\r\nAnnotation의 값을 읽어오는게 전부라 별로 할말이 없다.\r\n\r\n```java\r\npackage com.sample;\r\n\r\nimport io.swagger.v3.oas.annotations.Operation;\r\nimport org.springframework.beans.factory.config.BeanDefinition;\r\nimport org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;\r\nimport org.springframework.core.type.filter.AnnotationTypeFilter;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.util.ClassUtils;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.Set;\r\n\r\npublic class APIFinder {\r\n    public static void main(String[] args) {\r\n        ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(false);\r\n        provider.addIncludeFilter(new AnnotationTypeFilter(Controller.class));\r\n\r\n        Set<BeanDefinition> controllerBeans = provider.findCandidateComponents(\"com.sample\");\r\n\r\n        for (BeanDefinition beanDefinition : controllerBeans) {\r\n            String className = beanDefinition.getBeanClassName();\r\n            Class<?> clazz = ClassUtils.resolveClassName(className, ClassUtils.getDefaultClassLoader());\r\n\r\n            RequestMapping requestMapping = clazz.getAnnotation(RequestMapping.class);\r\n            String prefix = requestMapping.value()[0];\r\n\r\n            for (java.lang.reflect.Method method : clazz.getMethods()) {\r\n                GetMapping getMapping = method.getAnnotation(GetMapping.class);\r\n                PostMapping postMapping = method.getAnnotation(PostMapping.class);\r\n                PutMapping putMapping = method.getAnnotation(PutMapping.class);\r\n                DeleteMapping deleteMapping = method.getAnnotation(DeleteMapping.class);\r\n\r\n                String mapping = \"\";\r\n                String methodStr = \"\";\r\n                \r\n                if(getMapping != null){\r\n                    methodStr = \"GET\";\r\n                    String [] arr = method.getAnnotation(GetMapping.class).value();\r\n                    if(arr.length != 0){\r\n                        mapping = arr[0];\r\n                    }\r\n                }else if(postMapping != null){\r\n                    methodStr = \"POST\";\r\n                    String [] arr = method.getAnnotation(PostMapping.class).value();\r\n                    if(arr.length != 0){\r\n                        mapping = arr[0];\r\n                    }\r\n                }else if(putMapping != null){\r\n                    methodStr = \"PUT\";\r\n                    String [] arr = method.getAnnotation(PutMapping.class).value();\r\n                    if(arr.length != 0){\r\n                        mapping = arr[0];\r\n                    }\r\n                }else if(deleteMapping != null){\r\n                    methodStr = \"DELETE\";\r\n                    String [] arr = method.getAnnotation(DeleteMapping.class).value();\r\n                    if(arr.length != 0){\r\n                        mapping = arr[0];\r\n                    }\r\n                }\r\n                if(!methodStr.equals(\"\")){\r\n                    System.out.println(className + \"\\t\" + prefix + mapping + \"\\t\" + methodStr);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```shell\r\n✔\r\ncom.sample.SampleController   /api/vi/get       GET\r\ncom.sample.SampleController   /api/vi/post      POST\r\ncom.sample.SampleController   /api/vi/delete    DELETE\r\ncom.sample.SampleController   /api/vi/put       PUT\r\n```\r\n\r\n## 👋 마치며\r\n깔끔하게 짜여진 소스는 아니지만 언젠가 필요할지도 모르겠다.\r\n\r\n"},{"excerpt":"️🧪 테스트 환경 Amazon Linux 2023 (EC2) PostgreSQL 17.2 ✋ 들어가며 PostgreSQL을 사용하면서 패스워드 복잡도와 같은 정책들을 적용하게 되었는데 다양한 정책을 쉽게 적용할 수 있는\n를 활용하기로 했다. 'pass123' 같은 쉬운 패스워드를 설정하지 못하게 하려면  패키지를 추가로 설치해야하는데 이 글에서는 다루지 …","fields":{"slug":"/postgresql-password-policy-credcheck/"},"frontmatter":{"date":"March 12, 2025","title":"PostgreSQL 패스워드 정책 설정 (CredCheck)","tags":["postgresql","ec2"],"emoji":"📃","series":null},"rawMarkdownBody":"\r\n## ️🧪 테스트 환경\r\n> - Amazon Linux 2023 (EC2)\r\n> - PostgreSQL 17.2\r\n\r\n## ✋ 들어가며\r\nPostgreSQL을 사용하면서 패스워드 복잡도와 같은 정책들을 적용하게 되었는데 다양한 정책을 쉽게 적용할 수 있는\r\n`CredCheck`를 활용하기로 했다. 'pass123' 같은 쉬운 패스워드를 설정하지 못하게 하려면 `cracklib` 패키지를 추가로 설치해야하는데 이 글에서는 다루지 않는다.\r\n\r\n## 🏗️ CredCheck 확장프로그램 설치하기\r\n\r\n#### ***다운로드***\r\n만약 Git이 설치되어있지 않다면 [CredCheck↗](https://github.com/HexaCluster/CredCheck)에서 다운받아 아래 경로에 올려둔다.\r\n\r\n```shell\r\ncd `PostgreSQL설치경로`/share/contrib\r\ngit clone https://github.com/MigOpsRepos/CredCheck\r\n```\r\n\r\n#### ***설치 전 설정***\r\nMakefile을 열어서 PG_CONFIG 경로를 지정한다. \r\n\r\n```shell\r\ncd `PostgreSQL설치경로`/share/contrib/credcheck\r\nvi Makefile\r\n```\r\n\r\n```shell\r\n...\r\n#PG_CONFIG = pg_config\r\nPG_CONFIG = `PostgreSQL설치경로`/bin/pg_config\r\n...\r\n```\r\n\r\n#### ***컴파일 및 설치***\r\n```shell\r\nmake\r\nmake install\r\n```\r\n\r\n#### ***설치 후 설정***\r\nPostgreSQL 데이터 경로에서 `postgresql.conf`를 아래와 같이 수정한다.\r\n\r\n```shell\r\nvi `PostgreSQL데이터경로`/postgresql.conf\r\n```\r\n```shell\r\n...\r\n#shared_preload_libraries = ''          # (change requires restart)\r\nshared_preload_libraries = '$libdir/credcheck'\r\n...\r\n```\r\n\r\n### ***DB 설정***\r\n데이터베이스에 접근 후 쿼리로 CredCheck 확장 프로그램을 활성화한다.\r\n\r\n```sql\r\ncreate extension credcheck;\r\nselect * from pg_extension;\r\n```\r\n\r\n아래와 같이 CredCheck 확장 프로그램이 활성화된걸 확인할 수 있다.\r\n```shell\r\n✔\r\n  oid  |  extname  | extowner | extnamespace | extrelocatable | extversion | extconfig | extcondition\r\n-------+-----------+----------+--------------+----------------+------------+-----------+--------------\r\n 22488 | credcheck |       10 |         2200 | f              | 3.0.0      |           |\r\n...\r\n```\r\n\r\n\r\n## 🔐️ PostgreSQL 패스워드 정책 설정\r\n설치가 완료되었으면 이제 아주 간단하게 패스워드 정책을 설정할 수 있다. 모든 작업은 데이터베이스에 접근해서 쿼리로 수행한다.\r\n\r\n#### ***사용가능한 정책 목록***\r\n\r\n| Check                       | Type     | Description                                         \t\t\t\t\t\t\t\t\t  |\r\n|-----------------------------|----------|------------------------------------------------------------------------------------------|\r\n| `username_min_length      ` | username | 사용자 이름의 최소 길이                            \t\t\t\t\t\t\t\t\t  |\r\n| `username_min_special     ` | username | 최소 특수 문자 수                                  \t\t\t\t\t\t\t\t\t  |\r\n| `username_min_digit       ` | username | 최소 숫자 수                                      \t\t\t\t\t\t\t\t\t  |\r\n| `username_min_upper       ` | username | 최소 대문자 수                                    \t\t\t\t\t\t\t\t\t  |\r\n| `username_min_lower       ` | username | 최소 소문자 수                                    \t\t\t\t\t\t\t\t\t  |\r\n| `username_min_repeat      ` | username | 문자가 반복될 수 있는 최대 횟수                    \t\t\t\t\t\t\t\t\t  |\r\n| `username_contain_password` | username | 사용자 이름에 비밀번호가 포함되어서는 안 됨         \t\t\t\t\t\t\t\t\t  |\r\n| `username_contain         ` | username | 사용자 이름에 다음 문자 중 하나가 포함되어야 함   \t\t\t\t\t\t\t\t\t  |\r\n| `username_not_contain     ` | username | 사용자 이름에 다음 문자가 포함되어서는 안 됨      \t\t\t\t\t\t\t\t\t  |\r\n| `username_ignore_case     ` | username | 위의 검사를 수행할 때 대소문자를 무시함           \t\t\t\t\t\t\t\t\t  |\r\n| `password_min_length      ` | password | 비밀번호의 최소 길이                                \t\t\t\t\t\t\t\t\t  |\r\n| `password_min_special     ` | password | 최소 특수 문자 수                                  \t\t\t\t\t\t\t\t\t  |\r\n| `password_min_digit       ` | password | 비밀번호의 최소 숫자 수                            \t\t\t\t\t\t\t\t\t  |\r\n| `password_min_upper       ` | password | 최소 대문자 수                                    \t\t\t\t\t\t\t\t\t  |\r\n| `password_min_lower       ` | password | 최소 소문자 수                                    \t\t\t\t\t\t\t\t\t  |\r\n| `password_min_repeat      ` | password | 문자가 반복될 수 있는 최대 횟수                    \t\t\t\t\t\t\t\t\t  |\r\n| `password_contain_username` | password | 비밀번호에 사용자 이름이 포함되어서는 안 됨        \t\t\t\t\t\t\t\t\t  |\r\n| `password_contain         ` | password | 비밀번호에 다음 문자가 포함되어야 함               \t\t\t\t\t\t\t\t\t  |\r\n| `password_not_contain     ` | password | 비밀번호에 다음 문자가 포함되어서는 안 됨         \t\t\t\t\t\t\t\t\t  |\r\n| `password_ignore_case     ` | password | 위의 검사를 수행할 때 대소문자를 무시함           \t\t\t\t\t\t\t\t\t  |\r\n| `password_valid_until     ` | password | 최소 일수와 함께 CREATE ROLE 문에서 VALID UNTIL 절 사용 강제화                       |\r\n| `password_valid_max       ` | password | 최대 일수와 함께 CREATE ROLE 문에서 VALID UNTIL 절 사용 강제화                       |\r\n\r\n#### ***정책 적용 방법***\r\n`ALTER SYSTEM SET` 구문을 이용해서 위 정책들을 하나씩 설정할 수 있다.\r\n\r\n```sql\r\nALTER SYSTEM SET credcheck.password_min_length = 8; -- 비밀번호의 최소 길이\r\nALTER SYSTEM SET credcheck.password_min_special = 1; -- 특수문자 포함\r\nALTER SYSTEM SET credcheck.password_min_digit = 1; -- 숫자 포함\r\nALTER SYSTEM SET credcheck.password_min_upper = 1; -- 대문자 포함\r\nALTER SYSTEM SET credcheck.password_min_lower = 1; -- 소문자 포함\r\nALTER SYSTEM SET credcheck.password_contain_username  = on; -- 사용자명 포함 불가\r\n\r\nSELECT pg_reload_conf();\r\n```\r\n\r\n설정된 정책을 확인하기 위해서는 `SHOW` 구문을 사용해서 출력한다.\r\n```sql\r\nSHOW credcheck.password_min_length;\r\n```\r\n```shell\r\n✔\r\n credcheck.password_min_length\r\n-------------------------------\r\n 8\r\n```\r\n\r\n#### ***테스트***\r\n위 설정이 모두 끝났다면 실제로 User를 생성해보면 정상적으로 설정되었는지 확인할 수 있다.\r\n\r\n```sql\r\nCREATE USER aa WITH PASSWORD 'aaa';\r\n```\r\n\r\n설정하려고하는 패스워드의 길이가 8자리가 안되기 떄문에 어림없다는 메시지와 함께 정상 설정 되었음을 알 수 있다.\r\n```shell\r\n```sql\r\n✔\r\nERROR:  password length should match the configured credcheck.password_min_length (8)\r\n```\r\n\r\n## 👋 마치며\r\nPostgreSQL에서 안전한 비밀번호 관리 절차와 작성 규칙을 수립하기 위해서 `CredCheck`를 사용해봤는데 간단하고 유용한 것 같다.\r\n"},{"excerpt":"☀️ 테스트 환경 Amazon Linux 2023 (EC2) ✋ 들어가며 SSH 프로토콜의 포트는 일반적으로 기본 포트인 22번 포트를 사용하는데\n자동화된 스크립트를 통한 공격이나 불필요한 접근을 차단하는 등 보안을 강화하기 위해서 포트를 변경하는 시스템들이 많이 있다. RHEL(Red Hat Enterprise Linux) 환경에서 어떻게 포트를 변경하는…","fields":{"slug":"/amazon-linux-rhel-ssh-port/"},"frontmatter":{"date":"March 10, 2025","title":"리눅스 SSH 포트 변경 (Amazon Linux, RHEL)","tags":["aws","ec2","amazon-linux","linux"],"emoji":"🔐","series":null},"rawMarkdownBody":"\r\n## ☀️ 테스트 환경\r\n> - Amazon Linux 2023 (EC2)\r\n\r\n## ✋ 들어가며\r\nSSH 프로토콜의 포트는 일반적으로 기본 포트인 22번 포트를 사용하는데\r\n자동화된 스크립트를 통한 공격이나 불필요한 접근을 차단하는 등 보안을 강화하기 위해서 포트를 변경하는 시스템들이 많이 있다.\r\n\r\nRHEL(Red Hat Enterprise Linux) 환경에서 어떻게 포트를 변경하는지 알아보겠다. \r\n\r\n## 🔄️ SSH 포트 변경하기\r\nRHEL 환경에서 SSH 포트를 변경하는 방법은 아주 간단하다. 설정 파일을 열어서 포트를 변경한 후 SSH 서비스를 재시작하면 끝\r\n\r\n#### ***설정 파일 수정***\r\n```shell\r\nvi /etc/ssh/sshd_config\r\n```\r\n```shell\r\n# semanage port -a -t ssh_port_t -p tcp #PORTNUMBER\r\n#\r\n# Port 22\r\nPort 2222\r\n...\r\n```\r\n#### ***sshd 재시작***\r\n```shell\r\nsystemctl restart sshd\r\n```\r\n\r\n#### ***변경된 포트 확인***\r\n```shell\r\nnetstat -nlp | grep sshd\r\n```\r\n```shell\r\n✔\r\ntcp        0      0 0.0.0.0:2222            0.0.0.0:*               LISTEN      2313825/sshd: /usr/\r\ntcp6       0      0 :::2222                 :::*                    LISTEN      2313825/sshd: /usr/\r\n```\r\n\r\n\r\n## 👋 마치며\r\n아주 간단한 방법으로 SSH 포트 변경이 가능한데도 매번 변경을 진행할 때마다 잘 생각이 안나는데 이참에 기록해뒀으니 다른 블로그는 안찾아봐도 될 것 같다.\r\n\r\n"},{"excerpt":"✋ 들어가며 프리랜서 아키텍처 혹은 개발자로 대부분의 시간을 살아오면서 GitOps에 대한 경험을 할 기회가 많지 않았는데 최근 프로젝트에서 클라우드 인프라를 관리하기 위한 워크플로우를 경험하게 되었다. 🔎 GitOps가 뭐야? GitOps는 Git 리포지토리를 단일 정보 소스로 사용하여 인프라를 코드로 제공하며, 제출된 코드에서는 CI 프로세스를 확인하…","fields":{"slug":"/gitops-workflow/"},"frontmatter":{"date":"March 05, 2025","title":"GitOps Workflow에 대한 나의 경험","tags":["gitops","aws","kubernetes"],"emoji":"🏢","series":null},"rawMarkdownBody":"\r\n## ✋ 들어가며\r\n프리랜서 아키텍처 혹은 개발자로 대부분의 시간을 살아오면서 GitOps에 대한 경험을 할 기회가 많지 않았는데 최근 프로젝트에서 클라우드 인프라를 관리하기 위한 워크플로우를 경험하게 되었다.\r\n\r\n\r\n## 🔎 GitOps가 뭐야?\r\n\r\nGitOps는 Git 리포지토리를 단일 정보 소스로 사용하여 인프라를 코드로 제공하며, 제출된 코드에서는 CI 프로세스를 확인하고,\r\nCD 프로세스에서는 보안, 코드형 인프라(IaC) 또는 애플리케이션 프레임워크에 설정된 기타 경계와 같은 요구 사항을 확인하고 적용한다.\r\n코드에 대한 모든 변경 사항이 추적되므로 업데이트를 손쉽게 수행할 수 있으며 롤백이 필요한 경우 버전 제어 기능도 제공된다.\r\n\r\n## 💡 GitOps의 핵심 아이디어\r\n\r\n- 배포에 관련된 모든 것을 선언형 기술서(Declarative Descriptions) 형태로 작성하여 Config Repository(혹은 Environment Repository)에서 관리한다. \r\n- Config Repository의 선언형 기술서와 운영 환경 간 상태 차이가 없도록 유지시켜주는 자동화 시스템을 구성한다.\r\n\r\n## 🎡 내가 경험해본 GitOps Workflow\r\n\r\n최근 프로젝트에서 경험했던 GitOps의 Workflow는 아래 작성한 이미지로 요약할 수 있다.\r\n\r\n![](images/20250304_125653.png)\r\n\r\n#### ***흐름을 살쳐보면..***\r\n\r\n1) 애플리케이션 소스를 Source Repository에 Push한다.\r\n2) 이전 단계에서 Webhook이 발생하거나 수동으로 처리하는 빌드 등의 Trigger가 발생하면 Jenkins에서 최신 소스를 내려받아서 이후 파이프라인에 작성된 절차가 수행된다.\r\n3) 내려받은 최신소스의 빌드를 진행하고 생성된 Container Image를 Amazon ECR(Elastic Container Registry)에 Push한다.\r\n4) Helm Chart를 사용해서 매니페스트 템플릿에 Container Image ID를 포함한 설정 정보를 변경하고 Config Repository에 Push한다.\r\n   <br/><br/>_그림에는 표현되어있지 않지만 IaC(Infrastructure as Code)를 활용해서 Amazon EKS(Elastic Kubernetes Service) 클러스터가 생성되어있는데 이때는 Terraform이 사용되었다._\r\n5) ArgoCD에서 Config Repository에 의도된 상태와 현재 상태의 차이를 감지한다. \r\n6) Config Repository를 기반으로 EKS 클러스터에 동기화를 수행한다.\r\n\r\n## 📖 참고자료\r\n\r\n> [GitOps란: Git 기반의 지속적인 운영 및 배포 방법론 적용](https://www.redhat.com/ko/topics/devops/what-is-gitops)\r\n> <br/>\r\n> [데브옵스의 확장 모델 – 깃옵스(GitOps) 이해하기 | 인사이트리포트 | 삼성SDS](https://www.samsungsds.com/kr/insights/gitops.html)\r\n\r\n## 👋 마치며\r\n\r\nAWS에서 이러한 환경을 경험해봤는데 더 깊이있는 이해를 위해서 다시 한번 실습해보는 시간을 가져봐야겠다."},{"excerpt":"✋ 들어가며 필자가 계속 업데이트 사용하고 있는 Gatsby Blog 테마↗에도 Mermaid 문법을 지원하도록 업데이트 되었다.\n기술 블로그를 운영하다보면 다이어그램이나 플로우차트를 포함한 다양한 차트를 그려서 설명해야하는 경우가 생긴다. 이미지를 제작 후 삽입하는 형태보다 Mermaid 문법을 사용하면 좋을 것 같아서 소개해보려고 한다. ☀️ 테스트 환…","fields":{"slug":"/gatsby-mermaid-syntax-flowchart/"},"frontmatter":{"date":"February 27, 2025","title":"Gatsby 마크다운에 Flowchart 그리기 (Mermaid 문법)","tags":["github-pages","blog","gatsby","markdown","mermaid"],"emoji":"🧜","series":"📝 나만의 블로그를 운영하며"},"rawMarkdownBody":"\r\n## ✋ 들어가며\r\n필자가 계속 업데이트 사용하고 있는 [Gatsby Blog 테마↗](https://github.com/rundevelrun/gatsby-starter-rundevelrun)에도 Mermaid 문법을 지원하도록 업데이트 되었다.\r\n기술 블로그를 운영하다보면 다이어그램이나 플로우차트를 포함한 다양한 차트를 그려서 설명해야하는 경우가 생긴다. 이미지를 제작 후 삽입하는 형태보다 Mermaid 문법을 사용하면 좋을 것 같아서 소개해보려고 한다.\r\n\r\n\r\n## ☀️ 테스트 환경\r\n> - NodeJS v22.13.0\r\n> - yarn 1.22.22\r\n\r\n## 🔎 Mermaid란 무엇인가\r\nMermaid는 JavaScript 기반의 다이어그램 및 차트 도구로,\r\n마크다운에 작성된 텍스트를 렌더링하여 다이어그램을 동적으로 생성할 수 있는 도구라고 [공식문서↗](https://mermaid.js.org/intro/)에 소개되어있고 AI 친구에게 번역을 부탁한 후 그대로 가져왔다.\r\n\r\n## 🧜 Gatsby에 Mermaid 플러그인 설치하기\r\n[Gatsby Blog 테마↗](https://github.com/rundevelrun/gatsby-starter-rundevelrun)를 사용하고 있다면 Mermaid 플러그인이 설치되어있지만 그렇지 않은 방문자를 위해 아주 간단한 설치방법을 소개해보겠다.\r\n\r\n\r\n#### ***의존성 패키지 설치***\r\n\r\n`package.json`에 의존성 패키지를 추가하고 설치를 진행한다. \r\n\r\n```json\r\n...\r\n  \"dependencies\": {\r\n    \"gatsby-remark-mermaid\": \"^5.0.0\",\r\n    \"playwright\": \"^1.50.1\",\r\n...\r\n```\r\n\r\n#### ***gatsby 설정 수정***\r\n\r\n`gatsby-config.js`의 gatsby-transfomer-remark 하위에 gatsby-remark-mermaid를 추가하면 끝.\r\n```js\r\nmodule.exports = {\r\n  plugins: [\r\n  {\r\n    resolve: `gatsby-transformer-remark`,\r\n    options: {\r\n      plugins: [\r\n        `gatsby-remark-mermaid`,\r\n...\r\n```\r\n\r\n## 📝 Mermaid 문법 사용하기\r\nFlowchart, Gantt, Kanban, Mindmaps, Git 등 다양한 다이어그램 문법을 지원하는데 몇개만 살펴보도록 하겠다.\r\n\r\n#### ***Flowchart 예제***\r\n\r\n````\r\n--- \r\ntitle: Example\r\n---\r\nflowchart LR\r\n    A[Start] --> B{isYN}\r\n    B -- Y --> C[Success]\r\n    B -- N --> D[Fail]\r\n````\r\n\r\n```mermaid\r\n--- \r\ntitle: Example\r\n---\r\nflowchart LR\r\n    A[Start] --> B{isYN}\r\n    B -- Y --> C[Success]\r\n    B -- N --> D[Fail]\r\n```\r\n\r\n#### ***Pie Chart 예제***\r\n````\r\n```\r\npie title Example\r\n    \"Python\": 20.17\r\n    \"C++\": 10.75\r\n    \"Java\": 6.45\r\n    \"C\":8.89\r\n    \"C#\":6.08\r\n```\r\n````\r\n\r\n```mermaid\r\npie title Example\r\n    \"Python\": 20.17\r\n    \"C++\": 10.75\r\n    \"Java\": 6.45\r\n    \"C\":8.89\r\n    \"C#\":6.08\r\n```\r\n\r\n### ***Architecture 예제***\r\n\r\n````\r\n```mermaid\r\narchitecture-beta\r\n    group api(cloud)[Example]\r\n    \r\n    service db(database)[Database] in api\r\n    service disk1(disk)[Storage] in api\r\n    service disk2(disk)[Storage] in api\r\n    service server(server)[Server] in api\r\n    \r\n    db:L -- R:server\r\n    disk1:T -- B:server\r\n    disk2:T -- B:db\r\n```\r\n````\r\n\r\n```mermaid\r\narchitecture-beta\r\n    group api(cloud)[Example]\r\n    \r\n    service db(database)[Database] in api\r\n    service disk1(disk)[Storage] in api\r\n    service disk2(disk)[Storage] in api\r\n    service server(server)[Server] in api\r\n    \r\n    db:L -- R:server\r\n    disk1:T -- B:server\r\n    disk2:T -- B:db\r\n```\r\n\r\n#### ***Git Diagram 예제***\r\n\r\n````\r\n\r\n```mermaid\r\n---\r\ntitle: Example\r\n---\r\ngitGraph\r\n    commit\r\n    branch develop\r\n    commit\r\n    branch bugfix\r\n    commit\r\n    commit\r\n    checkout develop\r\n    merge bugfix\r\n    branch feature\r\n    checkout feature\r\n    commit\r\n    commit\r\n    checkout develop\r\n    merge feature\r\n    checkout main\r\n    merge develop\r\n    \r\n\r\n```\r\n````\r\n\r\n\r\n```mermaid\r\n---\r\ntitle: Example\r\n---\r\ngitGraph\r\n    commit\r\n    branch develop\r\n    commit\r\n    branch bugfix\r\n    commit\r\n    commit\r\n    checkout develop\r\n    merge bugfix\r\n    branch feature\r\n    checkout feature\r\n    commit\r\n    commit\r\n    checkout develop\r\n    merge feature\r\n    checkout main\r\n    merge develop\r\n```\r\n\r\n## 👋 마치며\r\n소개한 다이어그램과 차트 외에도 아주 다양한 문법을 지원하고 있는데 어디에 써먹으면 좋을지는 모르겠지만 Git Diagram이 뭔가 마음에 든다."},{"excerpt":"☀️ 테스트 환경 Windows 11 Pro IntelliJ IDEA 2024.3 (Ultimate Edition) ✋ 들어가며  시리즈를 진행하면서 팔자에도 없던 Flutter 환경 설정의 맛을 조금 봤다.\n글을 작성하는 환경은 Windows지만 MacOS에서도 거의 동일하게 세팅이 가능해서 내용을 공유해보려고 한다. ❓ IntelliJ를 왜 선택했나 F…","fields":{"slug":"/flutter-sdk-install-intellij/"},"frontmatter":{"date":"February 25, 2025","title":"Flutter 개발환경 설정하기 (with. IntelliJ)","tags":["intellij","flutter"],"emoji":"🎯","series":"💰 무작정 모바일 앱 출시하기"},"rawMarkdownBody":"\r\n## ☀️ 테스트 환경\r\n> - Windows 11 Pro\r\n> - IntelliJ IDEA 2024.3 (Ultimate Edition)\r\n\r\n## ✋ 들어가며\r\n`무작정 모바일 앱 출시하기` 시리즈를 진행하면서 팔자에도 없던 Flutter 환경 설정의 맛을 조금 봤다.\r\n글을 작성하는 환경은 Windows지만 MacOS에서도 거의 동일하게 세팅이 가능해서 내용을 공유해보려고 한다.\r\n\r\n\r\n## ❓ IntelliJ를 왜 선택했나\r\nFlutter 공식 문서에는 `Visual Studio Code`를 사용하는 방법과 `Android Studio`, `IndelliJ IDEA`를 사용한 개발환경 구성 방식이 인기있는 옵션이라고 소개하고 있다.\r\n\r\n필자는 VSCode는 별로 선호하지 않고 익숙하지 않은데다가 무려 JetBrains를 신봉하는 사람이다.\r\n그럼 선택지가 Android Studio와 IntelliJ가 남아있는데 어차피 IntelliJ로 만들어져있는 Android Studio는 사용하지 않기로 했다.\r\n\r\n\r\n## 🎯 Flutter 개발환경을 설정해보자\r\nFlutter 개발환경을 가볍게 구성해보고 `Hello World!`와 같은 첫 페이지를 띄워보는게 이번 게시글의 핵심이 되겠다.\r\n\r\n#### ***1. Flutter SDK 다운로드***\r\n- [공식 설치 가이드↗](https://docs.flutter.dev/get-started/install)에 접속 후 아래 과정을 따라가보자.\r\n\r\n- 현재 설치하고자 하는 플랫폼을 선택한다.\r\n\r\n  ![](images/20250225_133646.png)\r\n\r\n- 지금 단계에서는 Flutter SDK를 다운받는게 목표이기 때문에 앱 유형은 크게 상관없다.\r\n\r\n  ![](images/20250225_133730.png)\r\n\r\n\r\n- 아래와 같이 최신버전의 Flutter SDK를 다운받을 수 있다.\r\n\r\n  ![](images/20250225_133822.png)\r\n\r\n- 다운받은 압축파일을 적당한 위치에 압축을 풀어놓으면 끝 (e.g. `C:\\flutter`)\r\n\r\n\r\n#### ***2. IntelliJ Plugins 설치***\r\n- `Settings ➡ Plugins`에서 flutter를 검색 후 설치한다.\r\n\r\n  ![](images/20250225_135009.png)\r\n\r\n- 아래와 같이 `Android`, `Dart`, `Flutter`가 한번에 설치되었음을 알 수 있다. \r\n\r\n  ![](images/20250225_140419.png)\r\n\r\n\r\n#### ***3. 신규 프로젝트 생성***\r\n- 새프로젝트를 생성하고 위에서 압축을 풀었던 Flutter SDK 경로를 넣어준다.\r\n\r\n  ![](images/20250225_140600.png)\r\n\r\n- 지원할 플랫폼 등의 필수 요소들을 입력하면 끝이다.\r\n\r\n  ![](images/20250225_140653.png)\r\n\r\n#### ***4. Hello World!***\r\n- 환경설정이 정상이라면 아래와 같은 화면이 나오는데 실행할 Device를 선택 후 실행 버튼을 눌러준다. (Web Browser, Android Emulator, iOS Simulator, Physical device 등을 지원)\r\n\r\n  ![](images/20250225_141011.png)\r\n\r\n- 잠시 기다리면 `Hello World!`라고 부르기에는 너무 거창한 초기 화면이 보여진다. 심지어 `+` 버튼을 누르면 숫자가 올라간다.\r\n\r\n  ![](images/20250225_141322.png)\r\n\r\n\r\n## 👋 마치며\r\n이렇게 팔자에도 없던 Flutter의 개발환경을 구성해봤는데, 한가지 소스로 멀티 플랫폼을 지원한다는게 너무 만족스럽다.\r\n하지만 아무리 멀티 플랫폼을 지원하더라도 디자인에 센스가 제로에 가까워서 예쁜 앱을 만들어내기에는 힘들 것 같다. (~~그래서 대충 만들기로 나 자신과 협의했다~~)"},{"excerpt":"☀️ 테스트 환경 AWS Console ✋ 들어가며 개인정보보호법과 정보통신망법 기준을 충족하기 위해서 이미 생성 후 사용중인 Amazon EBS 볼륨의 암호화가 필요했다.\n글을 쓰고 있는 지금(2025-02-24)를 기준으로 이미 생성된 EBS 볼륨의 암호화 설정을 변경하는 것은 불가능하기 때문에 다른 방법이 필요했다. 🏫 EBS란? 우리가 아는 그 교육…","fields":{"slug":"/amazon-ec2-ebs-encrypt/"},"frontmatter":{"date":"February 24, 2025","title":"사용중인 Amazon EBS 암호화하기 (EC2에 연결된 상태)","tags":["aws","ec2","ebs"],"emoji":"🔒","series":null},"rawMarkdownBody":"\r\n## ☀️ 테스트 환경\r\n> - AWS Console\r\n\r\n## ✋ 들어가며\r\n개인정보보호법과 정보통신망법 기준을 충족하기 위해서 이미 생성 후 사용중인 Amazon EBS 볼륨의 암호화가 필요했다.\r\n글을 쓰고 있는 지금(2025-02-24)를 기준으로 이미 생성된 EBS 볼륨의 암호화 설정을 변경하는 것은 불가능하기 때문에 다른 방법이 필요했다.\r\n\r\n## 🏫 EBS란?\r\n우리가 아는 그 교육 방송 말고 EBS(Elastic Block Store)는 AWS에서 제공하는 블록 스토리지 서비스로 EC2에 연결해서 사용할 수 있는 스토리지 볼륨을 제공한다.\r\n블록 단위로 데이터를 저장하며 EC2 인스턴스가 종료되더라도 데이터가 유지된다는 특징이 있다.\r\n\r\n더 자세한 내용이 궁금하다면 [여기↗](https://aws.amazon.com/ko/ebs/) 공식 홈페이지를 살펴보자.\r\n\r\n## 🔒 EBS 암호화하기\r\nAWS EBS를 암호화하기 위해서는 크게 6단계의 과정이 필요한데 모두 AWS Console에서 이루어지며 EC2 중지와 시작과 같은 간단한 절차로 구성되어있어서 큰 어려움은 없을 것으로 예상이 된다.\r\n\r\n가장 먼저 암호화되지 않은 볼륨을 확인하고 천천히 한걸음씩 따라가보자.\r\n\r\n![](images/20250221_111956.png)\r\n\r\n#### ***1. EC2 중지***\r\n`EC2 ➡ 인스턴스`\r\n\r\n암호화가 필요한 EBS 볼륨이 연결된 EC2를 중지한다. 현재를 기준으로 스냅샷을 생성할 예정이기 때문에 더이상의 업데이트가 이루어지지 않도록 한다.\r\n\r\n![](images/20250221_112256.png)\r\n\r\n#### ***2. EBS 볼륨 분리***\r\n`EC2 ➡ Elastic Block Store ➡ 볼륨`\r\n\r\n암호화되지 않은 EBS 볼륨을 EC2에서 분리해준다.\r\n\r\n![](images/20250221_131037.png)\r\n\r\n#### ***3. 스냅샷 생성***\r\n`EC2 ➡ Elastic Block Store ➡ 볼륨`\r\n\r\n분리된 EBS 볼륨의 스냅샷을 생성한다.\r\n\r\n![](images/20250221_131207.png)\r\n\r\n![](images/20250221_131350.png)\r\n\r\n`EC2 ➡ Elastic Block Store ➡ 스냅샷`\r\n\r\n스냅샷 화면에서 생성된 스냅샷을 확인 할 수 있고 스냅샷의 상태가 '완료됨'으로 표시되어야 다음 단계로 넘어갈 수 있다.\r\n필자는 512GB의 볼륨의 스냅샷을 생성하는데 거의 2시간이 소요된 것 같다.\r\n\r\n![](images/20250221_133726.png)\r\n\r\n#### ***4. 암호화 EBS 볼륨 생성***\r\n`EC2 ➡ Elastic Block Store ➡ 볼륨`\r\n\r\n스냅샷의 생성이 완료되었다면 해당 스냅샷을 이용해서 암호화된 볼륨을 생성할 차례이다.\r\n\r\n![](images/20250221_131533.png)\r\n\r\n데이터 복원을 위해서 생성된 스냅샷 ID를 선택해주고 우리의 목표인 볼륨 암호화를 꼭 체크해준다. \r\n\r\n![](images/20250221_131929.png)\r\n\r\n아래와 같이 암호화된 볼륨이 생성되면 정상이고 암호화되지 않은 기존 볼륨은 삭제해도 좋다.\r\n\r\n![](images/20250221_151536.png)\r\n\r\n#### ***5. EBS 볼륨 연결***\r\n\r\n거의 마지막까지 왔는데 이 단계에서는 지금까지 생성한 암호화된 EBS 볼륨을 기존 EC2에 연결해준다.\r\n(필자는 연결 후에 화면을 캡쳐해서 '볼륨 연결'이 비활성화 되어있다.)\r\n\r\n![](images/20250221_151730.png)\r\n\r\n연결할 EC2 인스턴스를 선택하고 기존에 연결되어있던 디바이스 이름을 선택한다.\r\n별도의 설정이 없었다면 대부분 `/dev/xvda`으로 되어있다.\r\n\r\n![](images/20250221_151921.png)\r\n\r\n#### ***6. EC2 시작***\r\n마지막으로 1번 단계에서 중지했던 EC2를 시작하면 끝.\r\n이 과정도 평소의 시간보다는 조금 더 오래걸리고 퍼블릭 IP와 DNS가 변경되니 놀라지말자.\r\n\r\n\r\n## 👋 마치며\r\n어느새 벌써 24번째 게시글인데 여전히 방문자는 없다."},{"excerpt":"🏗️ 데이터를 만들어볼까? 본격적으로 운전면허 학과시험 문제은행 DB를 만들었던 과정을 작성하려고 한다.\n이 과정이 완전한 자동이었으면 좋겠지만 수작업이 다수 포함되어있어서 소스코드의 언급은 최소화하려고 한다. 👨‍🍳 자동인데.. 그 약간 수동을 곁들인.. 🔤 일단 PDF에서 텍스트만 뽑아내자  한국도로교통공단에서 제공하는 PDF는 위와 같은 형태로 구성이 되…","fields":{"slug":"/create-app-question-answer-database-2/"},"frontmatter":{"date":"February 05, 2025","title":"운전면허 학과시험 문제은행 DB 만들기 2","tags":["에세이","앱만들기"],"emoji":"💾","series":"💰 무작정 모바일 앱 출시하기"},"rawMarkdownBody":"\r\n## 🏗️ 데이터를 만들어볼까?\r\n\r\n본격적으로 운전면허 학과시험 문제은행 DB를 만들었던 과정을 작성하려고 한다.\r\n이 과정이 완전한 자동이었으면 좋겠지만 수작업이 다수 포함되어있어서 소스코드의 언급은 최소화하려고 한다.\r\n\r\n> 👨‍🍳 *자동인데.. 그 약간 수동을 곁들인..*\r\n\r\n## 🔤 일단 PDF에서 텍스트만 뽑아내자\r\n\r\n![](images/20250205_160753.png)\r\n\r\n한국도로교통공단에서 제공하는 PDF는 위와 같은 형태로 구성이 되어있고\r\n문항의 수, 정답의 수, 이미지 포함 여부, 이미지 설명 포함 여부 등이 문제마다 조금씩 다르다.\r\n\r\n#### ***모르겠고..***\r\n\r\n이미지나 동영상은 일단 지금 모르겠고 아무 생각도 안나니까 나중에 생각할거고 비교적 간단해보이는(?) 텍스트라도 먼저 뽑아보자는게 내 생각이었다.\r\n\r\n#### ***PDF에서 텍스트 출력하기***\r\n\r\n아래와 같은 간단하게 만든 자바 소스로 PDF에 포함된 모든 텍스트를 출력할 수 있었다.\r\n\r\n```JAVA\r\n// org.apache.pdfbox:podfbox:2.0.29\r\nPDDocument doc = PDDocument.load(new File(\"../question_bank.pdf\"));\r\nString text = new PDFTextStripper().getText(doc);\r\n...\r\n```\r\n\r\n아래와 같이 텍스트를 출력했더니 앞에 3문제만 뽑아왔는데도 문제에 줄바꿈이 있는 경우, 한줄에 문항이 여러개인 경우 등 정형화되지 않은 패턴들이 보이기 시작했다.\r\n게다가 패턴과 다르게 띄어쓰기가 표함된 경우, 문항 번호가 로마 숫자로 표기된 경우, 심지어는 문항 번호가 없는 경우 등의 패턴을 알 수 없는 단순 오타들도 많이 포함되어 있었다.  \r\n\r\n```text\r\n[예시]\r\n\r\n1. 다음 중 총중량 1.5톤 피견인 승용자동차를 4.5톤 화물자동차로 견인하는 경우 필요한 운전면허에 해당하지 않은 \r\n것은?\r\n ① 제1종 대형면허 및 소형견인차면허  ② 제1종 보통면허 및 대형견인차면허\r\n ③ 제1종 보통면허 및 소형견인차면허  ④ 제2종 보통면허 및 대형견인차면허\r\n■ 정답：4\r\n■ 해설：도로교통법 시행규칙 별표18 총중량 750킬로그램을 초과하는 3톤 이하의 피견인 자동차를 견인하기 위해서는 견인\r\n하는 자동차를 운전할 수 있는 면허와 소형견인차면허 또는 대형견인차면허를 가지고 있어야 한다.\r\n\r\n2. 도로교통법령상 운전면허증 발급에 대한 설명으로 옳지 않은 것은? \r\n ① 운전면허시험 합격일로부터 30일 이내에 운전면허증을 발급받아야 한다.\r\n ② 영문운전면허증을 발급받을 수 없다. \r\n ③ 모바일운전면허증을 발급받을 수 있다.\r\n④ 운전면허증을 잃어버린 경우에는 재발급 받을 수 있다.\r\n■ 정답：2\r\n■ 해설：도로교통법시행규칙 제77조∼제81조\r\n\r\n3. 시·도경찰청장이 발급한 국제운전면허증의 유효기간은 발급받은 날부터 몇 년인가?\r\n ① 1년    ② 2년  ③ 3년  ④ 4년\r\n■ 정답：1\r\n■ 해설：도로교통법 제98조에 따라 국제운전면허증의 유효기간은 발급받은 날부터 1년이다.\r\n...\r\n```\r\n\r\n그래서 원하는 패턴이 아닌 경우를 찾아내는 검증 로직이 필요해졌다. (~~아 귀찮아~~)\r\n\r\n## 🔎 정형화되지 않은 패턴 찾기\r\n\r\n#### ***원하는 패턴***\r\n\r\n내가 원하는 정형화된 패턴의 최종 모습은 아래와 같은 모습이었다.\r\n\r\n```text\r\n[예시]\r\n\r\n724. 다음 상황에서 가장 안전한 운전방법 2가지는?\r\n ① 도로 공사 중이므로 전방 상황을 잘 주시하며 운전한다.\r\n ② 노면이 고르지 않으므로 속도를 줄이지 않고 빠르게 진행하는 것이 안전하다.\r\n ③ 맞은편에서 진행하는 차량에 주의하며 서행한다.\r\n ④ 경음기를 계속 사용하며 우측의 주차되어 있는 공사 차량에 경고하고 속도를 높여 신속하게 진행한다.\r\n ⑤ 맞은편에서 진행하는 차량이 가까워질 때까지 속도를 유지하다가 급정지한다. \r\n■ 공사 중인 도로\r\n■ 맞은편에서 진행해오는 차량\r\n■ 길 우측에 주차시켜 놓은 공사 차량\r\n■ 정답 : 1, 3\r\n■ 해설 : 공사 중인 이면도로에서는 돌발 상황에 대비하여 속도를 줄이고 예측·방어·양보 운전한다.\r\n```\r\n\r\n순서대로 살펴보면 아래와 같다.\r\n\r\n1. 첫줄에는 문항 번호가 포함된 문제\r\n2. 이후 4~5줄에는 문항\r\n3. 이후 정답 라인이 나오기 전 이미지의 설명이 있다면 표시\r\n4. 정답 표시\r\n5. 해설이 여러줄 표시\r\n\r\n#### ***패턴 검증 로직 작성***\r\n\r\nPDF에서 뽑아낸 텍스트를 한줄씩 읽으면서 패턴에 맞지 않는 라인을 로그에 남기고\r\n혹시모르는 상황에 대비해서 최대한 눈으로 확인하는 과정을 거치고 수정 로직을 만들어서 변경하거나 경우에 따라서는 수작업으로 텍스트를 변경했다.\r\n너무 많은 패턴이 존재했기 때문에 이 과정이 가장 오래 걸리는 작업이었다.\r\n\r\n```JAVA\r\n// 한줄에 ①, ②가 같이 있는 경우\r\nif (line.contains(\"①\") && line.contains(\"②\")) {\r\n    System.out.println(nowQuestionNumber - 1 + \" \" + line);\r\n}\r\n\r\n...\r\n```\r\n\r\n#### ***그래서 결과는?***\r\n\r\n위에서 가공한 텍스트에 문제 유형과 점수를 포함해서 아래와 같은 JSON 구조로 변환했다.\r\n이미지와 동영상은 어떤식으로 관리할지 아직 고민중에 있고 화면을 만들어나가는 단계에서 구체화할 예정이다.\r\n\r\n```json\r\n[가공된 데이터]\r\n\r\n...\r\n{\r\n  \"type\": 3,\r\n  \"score\": 3,\r\n  \"num\": 800,\r\n  \"question\": \"왼쪽차로(1차로)에서 직진하며 교차로에 접근하고 있는 상황이다. 안전한 운전방법 2가지는?\",\r\n  \"choice1\": \"반대쪽 방향에 차가 없으므로 왼쪽으로 앞지르기하여 통과한다.\",\r\n  \"choice2\": \"감속하며 1차로 택시와 안전한 거리를 두고 접근한다.\",\r\n  \"choice3\": \"경음기을 사용하여 택시를 멈추게 하고 택시의 오른쪽으로 빠르게 통행한다.\",\r\n  \"choice4\": \"3차로로 연속 진로변경하여 정차한다.\",\r\n  \"choice5\": \"2차로로 진로변경하는 경우 택시와 보행자에 접근 시 감속한다. \",\r\n  \"description1\": \"교통정리가 없는 교차로\",\r\n  \"description2\": \"양방향 주차된 차들\",\r\n  \"description3\": \"오른쪽 후사경에 접근 중인 승용차\",\r\n  \"answer\": \"2,5\",\r\n  \"explanation\": \"1차로에 통행중인 택시가 오른쪽 보행자를 확인하고 제동하며... \\n...\"\r\n},\r\n...\r\n```\r\n\r\n위 JSON 데이터는 사실 최종 모습이 아니다.\r\n필자는 데이터를 최대한 사용하지 않는 앱을 원하기 때문에 JSON 데이터를 에셋에 포함시켜야하는데\r\n이전 글에서 내가 했던 것 처럼 내 앱의 압축을 풀었을때 데이터들을 알아보기 어렵게 하기 위해서 암호화를 진행했다. \r\n\r\n드디어 PDF에 포함된 텍스트들이 내가 원하는 모습으로 변했다.\r\n\r\n```text\r\n[암호화된 데이터]\r\n\r\n6LsRfvEAyS8BWCQ+8+kKDe8GQot9EJsMyQf3rpPqAXDC55z2+pIVsf0pKAM6cUbwS+8+kKDe8GQot9EJsMyQ...\r\n```\r\n\r\n<adsense></adsense>\r\n\r\n## 🖼️ 이미지와 동영상은 어떻게?\r\n\r\n#### ***PDF에 포함된 이미지 저장하기***\r\n\r\n![](images/20250206_091855.png)\r\n\r\n먼저 텍스트를 뽑아낼떄와 똑같은 라이브러리를 활용해서 PDF에 포함된 모든 이미지를 저장하는 로직을 작성했다.\r\n아래 소스를 이용하면 페이지 번호화 페이지의 이미지 순번을 포함한 이미지를 저장할 수 있다.\r\n하지만 문제의 번호에 맞게 이미지명을 변환해야하고 예상치 못한 깨진 이미지들이 포함되어서 또 수작업으로 정리가 필요했다.\r\n\r\n```JAVA\r\n// org.apache.pdfbox:podfbox:2.0.29\r\nPDDocument doc = PDDocument.load(new File(\"../question_bank.pdf\"));\r\nString text = new PDFTextStripper().getText(doc);\r\n\r\nint pageCount = 1; // 페이지 번호\r\n\r\n// 페이지 순환\r\nfor (PDPage page : document.getPages()) {\r\n    PDResources resources = page.getResources();\r\n    \r\n    int imageCount = 0; // 이미지 번호\r\n    \r\n    // 이미지 순환\r\n    for (COSName xObjectName : resources.getXObjectNames()) {\r\n        if (resources.isImageXObject(xObjectName)) {\r\n            PDImageXObject image = (PDImageXObject) resources.getXObject(xObjectName);\r\n            BufferedImage bufferedImage = image.getImage();\r\n            \r\n            // 이미지 파일명 생성 (페이지 번호 및 이미지 순서 포함)\r\n            String imageName = \"image_\" + pageCount + \"_\" + imageCount + \".png\";\r\n            File outputFile = new File(\"../images\", imageName);\r\n            \r\n            // 이미지 파일로 저장\r\n            ImageIO.write(bufferedImage, \"PNG\", outputFile);\r\n            \r\n            imageCount++;\r\n        }\r\n    }\r\n    pageCount++;\r\n}\r\ndocument.close();\r\n...\r\n```\r\n\r\n#### ***동영상 저장하기***\r\n\r\n데이터화에 마지막 단계는 동영상 문제에 필요한 동영상을 저장하는 것이다.\r\n뭔가 한번에 내려받을 수 있으면 좋겠지만 그런거 없다.\r\n그저 [한국도로교통공단↗](https://www.safedriving.or.kr/notice/rerBankMovieList.do?menuCode=MN-PO-1153)에서 한땀 한땀 내려받았다.\r\n\r\n![](images/20250206_092235.png)\r\n\r\n35개 밖에 안되는데 뭐..\r\n한땀.. 한땀..\r\n\r\n## 👋 마치며\r\n이렇게 운전면허 학과시험 모의고사 어플을 만들기 위한 데이터 작업이 어느정도 정리됐다.\r\n다음은 어떤 모습의 앱을 만들어낼지 사용자에게 직접적으로 보여지는 UI/UX를 구성해보도록 하겠다.\r\n"},{"excerpt":"✋ 들어가며 한국도로교통공단에서는 운전면허 학과시험의 문제은행을 제공하며 문장형, 일러스트형, 사진형, 안전표지형, 동영상형 문제가 총 1,000문제로 구성되어있다.\n이 중에서 유형별로 정해진 수를 랜덤으로 뽑아서 출제되는데 1종과 2종의 문제는 같고 합격 점수가 1종은 70점, 2종은 60점으로 되어있다.  🤬 나한테 왜 그랬어.. PDF로 제공되는 문…","fields":{"slug":"/create-app-question-answer-database/"},"frontmatter":{"date":"February 04, 2025","title":"운전면허 학과시험 문제은행 DB 만들기 1","tags":["에세이","앱만들기"],"emoji":"💾","series":"💰 무작정 모바일 앱 출시하기"},"rawMarkdownBody":"\r\n## ✋ 들어가며\r\n한국도로교통공단에서는 운전면허 학과시험의 문제은행을 제공하며 문장형, 일러스트형, 사진형, 안전표지형, 동영상형 문제가 총 1,000문제로 구성되어있다.\r\n이 중에서 유형별로 정해진 수를 랜덤으로 뽑아서 출제되는데 1종과 2종의 문제는 같고 합격 점수가 1종은 70점, 2종은 60점으로 되어있다. \r\n\r\n## 🤬 나한테 왜 그랬어..\r\nPDF로 제공되는 문제 은행을 한땀 한땀 데이터화하고 기분좋게 위 '들어가며'를 작성하고 긴 명절 휴가를 다녀왔다.\r\n\r\n> 💣 ***청천벽력***\r\n> <br/><br/>\r\n> 그 사이에 문제은행이 변경됐다..\r\n\r\n과거의 데이터로 서비스를 제공할 수 없으니 PDF 파일에서 텍스트 따로 이미지를 따로 뽑아내고 동영상은 또 홈페이지에서 하나 하나 내려받았던 이 귀찮은 작업을 다시해야했다. <br/>\r\n어디가 어떻게 변경되었는지 상세하게 알려주기라도하면 좋을텐데.. ~~너무하네 진짜로~~\r\n\r\n## 📂 데이터를 어떻게 만들어낼까?\r\n\r\n#### ***문제은행 PDF 분석***\r\n<br/>파일을 열면 어떤식으로 데이터화를 해야할지 정말 막막하다. 사실 여러번 열어도 막막한데 그 이유를 살펴보자.\r\n\r\n- 생각보다 PDF 문서의 스크롤 압박이 심하다. (양이 많다.)\r\n- Excel 처럼 문서가 정형화되어있지 않아서 패턴을 찾기 어렵다.\r\n- 문제 번호가 없는 등 오타가 꽤 많이 숨어있다.\r\n- 문제의 유형이 다양하다. (이미지가 해설에 포함된 경우, 문제에 포함된 경우, 1개인 경우 2개인 경우, 이미지 설명이 N개 있는 유형 등)\r\n- 동영상 문제는 홈페이지를 확인하라고 되어있다. \r\n- 기타 등등\r\n\r\n#### ***다른 개발자들은 어떻게 했을까?***\r\n<br/> \r\n\r\n![](images/20250204_090812.png)\r\n\r\n일단 막막한 마음을 조금이라도 해소하기 위해서 다른 앱들을 열어서 보기로 했다.\r\n무언가를 만들때 아이디어를 얻기 위해서 관련된 앱들을 순위에 상관없이 최대한 많이 받아서 사용해보는 편이다.\r\n\r\n![](images/20250204_101956.png)\r\n\r\n안드로이드 플레이스토어에서 `운전면허 학과시험`을 검색하면 많은 앱들이 나오는데 많은 앱을 다운받아서 사용해봤다.\r\n완성도가 높은 앱들도 많이 있었다. 과연 내가 더 완성도 높은 앱을 만들 수 있을까? (1등을 못하면 10등이라도 하자..^^)\r\n\r\n![](images/20250204_103153.png)\r\n\r\n내가 가장 많이 사용할거라고 생각한 연령대는 고등학교를 갓 졸업한 20살부터 20대 초반이라고 생각했다. 그래서 최초 다운로드 이후에 데이터를 최대한 사용하지 않는 안드로이드 APK의 압축을 풀어봤다. \r\n\r\n![](images/20250204_103934.png)\r\n\r\n많은 앱들이 데이터를 사용하지 않기 위함이거나 서버를 사용하지 않는 앱을 제작하기 위해서 문제은행, 이미지 동영상 등의 에셋을 앱에 포함시켜놓았는데\r\n과거의 문제은행으로 만들어져서 사용할수는 없지만 보통은 텍스트 파일 형태로 텍스트에 구분자를 두는 형식으로 데이터를 관리하고 있었다.\r\n\r\n결국 남의 앱을 열어도 수동으로 변환했을 것 같은 데이터들이 많아서 변환에 대한 아이디어를 얻을 수 없었지만 적어도 내가 만들게될 앱은 누가 APK를 열어봐도 알아볼 수 없도록 암호화 후 복호화해서 사용해야겠다는 생각이 들었다.\r\n\r\n## 👋 마치며\r\n글이 너무 길어지는 것 같아서 실제 데이터를 만들어내는 작업에 대한 내용은 다음 포스팅에서 이어가도록 하겠다."},{"excerpt":"✋ 들어가며 처음 개발자로 일하기 시작했을때는 주로 WebView 기반의 Android, iOS 모바일 하이브리드 앱을 주로 개발하다가 시간이 흐를수록 모바일 개발은 손을 떼고 Java 기반의 웹어플리케이션을 주로 개발해왔다.\n지금은 DevOps를 주로 다루고 있지만 가볍게(?) 나만의 서비스를 만들어보면 어떨까 하는 생각이 들어서 무작정 시작해보려고 한…","fields":{"slug":"/create-app-what-to-make-how-to-make-it/"},"frontmatter":{"date":"January 24, 2025","title":"무작정 시작해보는 앱 만들기 (무엇을 만들까?)","tags":["에세이","앱만들기"],"emoji":"🦴","series":"💰 무작정 모바일 앱 출시하기"},"rawMarkdownBody":"\r\n## ✋ 들어가며\r\n\r\n처음 개발자로 일하기 시작했을때는 주로 WebView 기반의 Android, iOS 모바일 하이브리드 앱을 주로 개발하다가 시간이 흐를수록 모바일 개발은 손을 떼고 Java 기반의 웹어플리케이션을 주로 개발해왔다.\r\n지금은 DevOps를 주로 다루고 있지만 가볍게(?) 나만의 서비스를 만들어보면 어떨까 하는 생각이 들어서 무작정 시작해보려고 한다. \r\n\r\n## 🫗 역사 속으로 사라진 나의 앱(들)\r\n\r\n나만 아는 역사이긴 하지만 이미 20~30개 정도의 앱을 출시해본 경험이 있다. 지금은 계정이 2개나 정지당하고 앱 역시 역사 속으로 사라졌다. \r\n\r\n#### ***첫번째 시도***\r\n\r\n나의 첫번째 시도는 2017년, 그 당시 표현으로 '똥을 눌때도 들어오는 돈'을 벌기위해서\r\n과감하게 안드로이드 개발자 계정을 구매했지만 아이디어가 없었던 나는 일단 라이센스에 문제가 없는 오픈소스를 찾아서 이름만 바꾼 앱을 출시했다.\r\n\r\n신기하게도 만드는데 1시간도 걸리지 않은 앱이 첫 달에 400원 정도의 수익이 생겼다. \r\n\r\n이렇게 10개를 찍어내면 4000원, 100개를 찍어내면 40,000원이 아닌가? \r\n근거가 하나도 없는 자신감이 생기고 희망이 보이기 시작했다. \r\n\r\n> 💣 ***이럴수가?***\r\n> <br/><br/>\r\n> 1개를 출시 했을때 400원이었던 수익이 10개를 출시 했더니 그대로 400원이었다.\r\n\r\n~~이렇게 조기 은퇴의 꿈이 좌절됐다.~~\r\n\r\n#### ***N번째 시도 (부끄러운 과거..)***\r\n\r\n2018년에는 지금까지 평생 만들었던 앱 중에서 가장 큰 수익을 안겨주었던 앱이 만들어졌다. (약 1만 다운로드)\r\n\r\n이때는 취미로 사진 동호회를 운영하면서 사진을 좋아하는 많은 사람들을 만나고 고민을 나누던 시기였다.\r\n사진을 좀 잘 찍으시는 분들의 최대 고민은 `내가 인스타그램에 올린 사진을 누군가 허락없이 도용한다는 것`이었다.\r\n\r\n인스타그램은 사진 저장이 막혀있는데 어떤 방식으로 다운로드를 하는지 궁금증이 생겼다.\r\n\r\n> ⚠️ 아니 이렇게 불편하게 남에 사진을 다운받는다고?\r\n\r\n당시 다른 앱이나 서비스들은 인스타그램 앱에서 공유하기 버튼을 눌러서 주소를 복사한 후 다운로드 앱으로 들어가서 붙여넣으면 사진이 저장되는 방식이었다.\r\n그래서 경쟁 앱보다 편안하게 남에 사진을 다운받을 수 있는 앱을 제작했다.\r\n\r\n내가 만들었던 앱을 실행하면 인스타그램 모바일 화면이 WebView 형태로 출력되고 Javascript를 이용해서 사진 위에 저장 버튼을 위치시켰다.\r\n인스타그램의 화면과 똑같은데 저장버튼이 추가되었던 것이다. \r\n\r\n꼬린내 나는 앱 중에서는 가장 편한 사용자 경험을 제공했던 것 같다.\r\n그래서 그런지 다운로드 수가 점점 늘어가고 1만 다운로드를 넘어섰을 때 누군가의 신고로 앱이 삭제됐다.\r\n\r\n![](images/20250124_171458.png)\r\n\r\n이후에도 정신을 못차리고 꼬린내 나는 앱들을 계속 제작했다. (e.g. WebView 기반으로 제작 후 승인이 나면 유튜브 다운로더로 둔갑해버리는 그런 앱들..)\r\n\r\n당연한 결과지만 그렇게 잦은 신고를 당하고 잦은 이의 신청을 하면서 첫번째 개발자 계정이 정지됐다.\r\n\r\n#### ***N+1번째 시도***\r\n\r\n이때는 오픈된 데이터를 어떻게 활용할지에 대한 관심이 많은 시기였다.\r\n가장 먼저 나의 관심을 끌었던 데이터는 도로교통공단에서 제공하는 '운전면허 학과시험 문제은행'이었다.\r\n운전면허 학과시험은 지금도 동일하게 공개된 1000문제 중에서 유형별로 총 40문제가 똑같이 출제되고 있다.\r\n\r\n그래서 공개된 데이터를 기반으로 운전면허 학과시험 모의고사 앱을 제작했는데 완성도가 좋지 않은 앱인데도 생각보다는 수요가 있었다.\r\n\r\n이렇게 또 희망이 보이기 시작하고 똑같은 UI를 활용해서 정보처리기사, 컴퓨터활용, 공인중개사 등 각종 기출문제 모의고사 앱을 제작해왔는데\r\n어느 순간 자격증 시험이 모두 CBT로 변경되면서 기출문제의 개념이 사라지고 업데이트하지 못한 앱들은 열기가 식기 시작했다.\r\n\r\n그러면서 나의 열정도 없어져버리고 관리하지 못한 개발자 계정은 두번째 정지를 맞이했다.\r\n\r\n![](images/20250124_171057.png)\r\n\r\n\r\n## 👀 그래서 뭘 만들건데?\r\n\r\n글이 너무 길어졌지만 결론은 아직도 도로교통공단에서 공개하고 있는 '운전면허 학과시험 문제은행'을 활용해서 다시 한번 운전면허 학과시험 모의고사 앱을 제작해보려고 한다.\r\n과거에는 안드로이드 플레이스토어에만 출시했지만 이번에는 안드로이드와 iOS에 모두 출시를 목표로 한번도 사용해보지 않은 [Flutter↗](https://flutter.dev/)를 활용할 예정이다.\r\n\r\n## 👋 마치며\r\nFlutter의 'F'도 모르지만 그렇게 깊게 공부할 생각은 아직 없다. (어쩔 수 없는 이 ~~불량한 태도~~)\r\n<br/>그저 이 시리즈의 제목처럼 일단 해보자는 마음으로 무작정 시작해보겠다."},{"excerpt":"✋ 들어가며 지금 보고있는 이 글의 시리즈에서 알 수 있듯이 얼마전까지는 Jetbrains에서 만든 문서도구인 Writerside↗로 블로그를 운영했었는데 \n정말 좋은 도구임은 틀림 없지만 블로그와는 좀 맍지 않는 부분이 많이 있었다. (아마도 API 문서 등에 적합할 것 같다.)\n그리하여 Gatsby를 이용한 블로그를 만들게 되었다. ☑️ Gatsby는 …","fields":{"slug":"/gatsby-theme-github-pages/"},"frontmatter":{"date":"January 24, 2025","title":"Gatsby 테마 설치 후 Github Pages에 배포하기 (feat. gatsby-starter-rundevelrun)","tags":["github-pages","blog","gatsby"],"emoji":"💬","series":"📝 나만의 블로그를 운영하며"},"rawMarkdownBody":"\r\n## ✋ 들어가며\r\n지금 보고있는 이 글의 시리즈에서 알 수 있듯이 얼마전까지는 Jetbrains에서 만든 문서도구인 [Writerside↗](https://www.jetbrains.com/ko-kr/writerside/)로 블로그를 운영했었는데 \r\n정말 좋은 도구임은 틀림 없지만 블로그와는 좀 맍지 않는 부분이 많이 있었다. (아마도 API 문서 등에 적합할 것 같다.)\r\n그리하여 Gatsby를 이용한 블로그를 만들게 되었다.\r\n\r\n> ☑️ Gatsby는 React와 GraphQL을 사용하여 Node.js 위에 구축된 오픈 소스 정적 사이트 생성기 입니다.\r\n> <br/><br/>\r\n> 출처 : [위키백과↗](https://en.wikipedia.org/wiki/Gatsby_(software))\r\n\r\n## 🤔 왜 Gatsby를 선택했나?\r\n\r\n1. Markdown 형식의 포스트 (Markdown, JSX가 포함된 MDX)\r\n   - Writerside에서 작성한 글들을 최소한의 수정으로 사용하기 위함\r\n2. Adsense 등 2500개 이상의 플러그인\r\n3. 필자가 더 알아가고 싶은 React 기반 \r\n4. 많은 수의 레퍼런스\r\n5. 블로그를 운영하면서 원하는건 모두 할 수 있을 것 같은 자유도 (GraphQL 등)\r\n\r\n## 🌱 테마 제작기\r\n\r\n> ☑️ 제작한 테마는 누구나 사용할 수 있도록 [Github↗](https://github.com/rundevelrun/gatsby-starter-rundevelrun)에 공개되어있다.\r\n\r\n편하게 사용할 수 있도록 [devHudi↗](https://github.com/devHudi/gatsby-starter-hoodie)님이 공개해주신 소스를 바탕으로 수정을 진행했다.\r\n\r\n1. SEO 최적화 진행\r\n2. Adsense 광고\r\n   - 본문 상/하단, 리스트 사이, ToC 하단에 광고 표시\r\n3. 본문 Emoji 영역과 Title 분리\r\n4. UI 변경\r\n5. 마이너한 버그 수정\r\n\r\n\r\n## 🏗️ 테마 설치하기\r\n\r\n## ☀️ 테스트 환경\r\n> - NodeJS v22.13.0\r\n> - yarn 1.22.22\r\n\r\n#### ***NodeJS 설치***\r\n자신의 OS에 맞는 [NodeJS↗](https://nodejs.org/ko/download) 설치\r\n\r\n#### ***Yarn 설치***\r\n```shell\r\nnpm install -g yarn\r\n```\r\n\r\n#### ***gatsby-cli 설치***\r\n```shell\r\nyarn global add gatsby-cli\r\n```\r\n\r\n#### ***gatsby-starter-rundevelrun 테마 설치***\r\n```shell\r\ngatsby new your-blog-name https://github.com/rundevelrun/gatsby-starter-rundevelrun.git\r\n```\r\n\r\n## 🤖 구동하기\r\n\r\n#### ***의존성 패키지 설치***\r\n```shell\r\ncd your-blog-name\r\nyarn install\r\n```\r\n\r\n#### ***구동***\r\n구동 후 `http://localhost:8000`으로 접속한다.\r\n```shell\r\nyarn develop\r\n```\r\n\r\n## 👨‍💻 사용자화\r\n`blog-config.js`의 내용을 자신에게 맞게 수정한다.\r\n\r\n```javascript\r\nmodule.exports = {\r\n  title: \"YOUR:BLOG:NAME\",    // SEO Blog title\r\n  headerTitle: \"YOUR:<em style='color:#ed6c02'>BLOG</em>:NAME\", // Logo 1\r\n  headerSubTitle: \"<em style='color:#ed6c02'>YOUR</em>:BLOG:<em style='color:#ed6c02'>NAME</em>\", // Logo 2\r\n  copyright: \"©YOUR:BLOG:NAME\", // copyright in footer\r\n  author: \"YOUR:NAME\",  // Your Name\r\n  description: \"Hi, Nice to meet you !\",  // description\r\n  siteUrl: \"https://6developer.com/\", // Your Site URL\r\n  links: {\r\n    github: \"https://github.com/rundevelrun\",\r\n    ...\r\n  },\r\n  giscus: {\r\n    ...\r\n  },\r\n  adsense: { \r\n    ...\r\n  }\r\n}\r\n```\r\n\r\n1. title : SEO에서 사용할 블로그명\r\n2. headerTitle : 블로그에 표시될 제목 (HTML 태그 가능)\r\n3. headerSubTitle : 블로그에 표시될 부제목\r\n   - HTML 태그 가능\r\n   - 옵션 값이며 있는 경우 블로그의 로고 영역이 5초마다 바뀐다.\r\n4. copyright : Footer 영역에 표시될 저작권 표시 이름\r\n5. author : 루트 페이지와 포스트 하단에 표시되는 작성자 이름\r\n6. description : 루트 페이지와 포스트 하단에 표시되는 작성자 설명\r\n7. siteUrl : 현재 블로그 URL\r\n8. links : 루트 페이지와 포스트 하단에 표시되는 Icon의 링크 목록\r\n9. giscus : 댓글 기능을 사용하기 위한 Giscus 정보\r\n10. adsense : 광고 기능을 사용하기 위한 Adsense 정보\r\n\r\n\r\n## 📝 포스트 작성하기\r\n1. `contents/posts` 폴더에 게시글 파일 생성 (두가지 방법)\r\n   - pathname으로 사용할 이름의 폴더를 만들고 하위에 'index.md'를 생성\r\n   - pathname으로 사용할 이름으로 `*.md` 파일 생성\r\n2. frontmatter 작성\r\n   ```yaml\r\n   ---\r\n   emoji: \"🚀\"\r\n   title: \"어떻게 시작할까요?\"\r\n   date: 2025-01-19 13:53:00\r\n   update: 2025-01-19 13:53:00\r\n   tags:\r\n      - rundevelrun\r\n      - howto\r\n   series: \"Gatsby 블로그 시작하기\"\r\n   ---\r\n   ```\r\n\r\n## 🚀 Github Pages 배포하기\r\nGatsby를 인수한 [Netlify](https://app.netlify.com/)를 아용한 아주 쉬운 배포 방법도 있지만 이 글에서는 Github Action을 이용하려고한다. \r\n필자의 경우 Git branch를 2개를 사용하고 있는데 `gatsby`에는 전체 소스가 올라가고 `main`에는 빌드된 소스가 배포된다.\r\n\r\n\r\n#### ***workflow 작성*** `.github/workflows/ci.yml`\r\n배포된 소스는 main에 push될 예정이므로 branchs 부분을 `main`으로 설정했다.\r\n```yaml\r\n# Simple workflow for deploying static content to GitHub Pages\r\nname: Deploy static content to Pages\r\n\r\non:\r\n  # Runs on pushes targeting the default branch\r\n  push:\r\n    branches: [\"main\"]\r\n\r\n  # Allows you to run this workflow manually from the Actions tab\r\n  workflow_dispatch:\r\n\r\n# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages\r\npermissions:\r\n  contents: read\r\n  pages: write\r\n  id-token: write\r\n\r\n# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.\r\n# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.\r\nconcurrency:\r\n  group: \"pages\"\r\n  cancel-in-progress: false\r\n\r\njobs:\r\n  # Single deploy job since we're just deploying\r\n  deploy:\r\n    environment:\r\n      name: github-pages\r\n      url: ${{ steps.deployment.outputs.page_url }}\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - name: Checkout\r\n        uses: actions/checkout@v4\r\n      - name: Setup Pages\r\n        uses: actions/configure-pages@v5\r\n      - name: Upload artifact\r\n        uses: actions/upload-pages-artifact@v3\r\n        with:\r\n          # Upload entire repository\r\n          path: '.'\r\n      - name: Deploy to GitHub Pages\r\n        id: deployment\r\n        uses: actions/deploy-pages@v4\r\n```\r\n\r\n#### ***배포 스크립트 작성*** `package.json`\r\n\r\n빌드된 정적 소스를 `main`에 배포하는 스크립트\r\n```json\r\n...\r\n\"scripts\": {\r\n   ...\r\n   \"deploy\": \"gatsby build && gh-pages -d public -b main\"\r\n},\r\n```\r\n\r\n#### ***배포 브랜치 최신화***\r\n배포 브랜치(현재 글에서는 main)에 위에서 작성한 `ci.yml`이 없는 상태라면 Github Action이 동작하지 않기 때문에 먼저 소스를 최신화한다.\r\n\r\n#### ***배포***\r\n`main` 브랜치에 빌드된 소스 push가 이루어지고 이후 `ci.yml`의 파이프라인이 동작한다.\r\n```shell\r\nyarn deploy\r\n```\r\n\r\n## 👋 마치며\r\n작성하다보니 너무 긴 글을 작성한 것 같다. 다음엔 조절해야지"},{"excerpt":"☀️ 테스트 환경 node v20.16.0 yarn 1.22.22 react ^18.2.0 ✋ 들어가며 지난 포스팅에서는 EC2에 올라간 SpringBoot 기반 웹어플리케이션에서 Presigned URL을 발급받는 과정을 알아보았다.\n이번에는 발급받은 Presigned URL을 사용해서 Client(React)에서 S3로 파일을 직접 업로드/다운로드 하는…","fields":{"slug":"/presigned-url-s3-upload-react/"},"frontmatter":{"date":"January 21, 2025","title":"React에서 S3 Presigned URL을 이용한 파일 업로드/다운로드","tags":["aws","s3","presigned-url","react"],"emoji":"⬆️","series":"📂 AWS S3 Presigned URL"},"rawMarkdownBody":"\r\n## ☀️ 테스트 환경\r\n> - node v20.16.0\r\n> - yarn 1.22.22\r\n> - react ^18.2.0\r\n\r\n## ✋ 들어가며\r\n\r\n지난 포스팅에서는 EC2에 올라간 SpringBoot 기반 웹어플리케이션에서 Presigned URL을 발급받는 과정을 알아보았다.\r\n이번에는 발급받은 Presigned URL을 사용해서 Client(React)에서 S3로 파일을 직접 업로드/다운로드 하는 방법에 대해서 작성해보려고 한다.\r\n\r\n\r\n## 🛠️ Presigned URL을 이용한 파일 업로드/다운로드\r\n\r\n#### ***파일 업로드***\r\n```tsx\r\nimport axios from \"axios\";\r\n```\r\n```tsx\r\n// File Object와 Presigned URL을 파라미터로 받아서 파일을 업로드\r\nconst uploadFile= async (file: File, presignedUrl: string) => {\r\n  try {\r\n    await axios.put(presignedUrl, file, {\r\n      headers: {\r\n        'Content-Type': file.type,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n}\r\n```\r\n\r\n#### ***파일 다운로드***\r\n\r\n```tsx\r\nimport axios from \"axios\";\r\n```\r\n```tsx\r\n// Presigned URL을 파라미터로 받아서 파일을 다운로드\r\nconst downloadFile = async (presignedUrl: string) => {\r\n  const response = await fetch(presignedUrl);\r\n  const blob = await response.blob();\r\n  const url = window.URL.createObjectURL(blob);\r\n  const link = document.createElement('a');\r\n  link.href = url;\r\n  link.download = 'file';\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n  window.URL.revokeObjectURL(url);\r\n}\r\n```\r\n\r\n## 👋\r\n\r\n"},{"excerpt":"☀️ 테스트 환경 OpenJDK 17.0.2   Gradle 8.0.2     Spring Boot 3.0.5 ✋ 들어가며 이번 포스팅 에서는 EC2에 올라간 SpringBoot 기반 웹어플리케이션에서 Presigned URL을 발급받는 과정을 작성해보려고 한다.\n현재 작성중인 Series의 첫번째 포스팅은 EC2에 S3 Bucket 접근 권한을 부여하는 …","fields":{"slug":"/presigned-url-s3-upload-springboot/"},"frontmatter":{"date":"January 21, 2025","title":"SpringBoot에서 S3 Presigned URL 발급받기","tags":["aws","s3","presigned-url","springboot"],"emoji":"🔐","series":"📂 AWS S3 Presigned URL"},"rawMarkdownBody":"\r\n## ☀️ 테스트 환경\r\n> - OpenJDK 17.0.2  \r\n> - Gradle 8.0.2    \r\n> - Spring Boot 3.0.5\r\n\r\n## ✋ 들어가며\r\n\r\n이번 포스팅 에서는 EC2에 올라간 SpringBoot 기반 웹어플리케이션에서 Presigned URL을 발급받는 과정을 작성해보려고 한다.\r\n현재 작성중인 Series의 첫번째 포스팅은 EC2에 S3 Bucket 접근 권한을 부여하는 과정을 작성했었다.\r\n\r\n이미 EC2에 S3 Bucket 접근 권한을 부여했기 때문에 이 글에서는 Credentials(Access key, Secret key)에 대한 내용은 언급하지 않는다.\r\n\r\n## ❓ Presigned URL이란?\r\n\r\n> ☑️ Presigned URL은 모두 유추 할 수 있겠지만 S3 Bucket에 파일을 업로드/다운로드할 수 있는 미리 서명된 URL으로 해당 URL을 통해서만 파일에 접근할 수 있다.\r\n\r\n\r\n## 🛠️ Presigned URL 발급받기\r\n\r\n#### ***build.gradle***\r\n\r\n먼저 AWS SDK를 사용하기 위해서 아래와 같이 의존성을 추가해준다.\r\n\r\n```gradle\r\ndependencies {\r\n    //  AWS\r\n    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.770'\r\n    implementation 'com.amazonaws:aws-java-sdk-core:1.12.770'\r\n    implementation 'com.amazonaws:aws-java-sdk-sts:1.12.770'\r\n}\r\n``` \r\n\r\n#### ***config 파일 수정***\r\n\r\n`application.properties` 또는 `application.yml` 파일에 S3 Bucket 이름을 추가해준다.\r\n\r\n- application.properties\r\n   ```properties\r\n   cloud.aws.s3.bucket=S3_BUCKET_NAME\r\n   ```\r\n- application.yml\r\n   ```yml\r\n   cloud:\r\n     aws:\r\n       s3:\r\n         bucket: S3_BUCKET_NAME\r\n   ```\r\n\r\n#### ***Presigned URL 발급받기***\r\n\r\n- 업로드용 Presigned URL 발급\r\n  ```java\r\n  @Value(\"${cloud.aws.s3.bucket}\")\r\n  private String bucket;\r\n\r\n  AmazonS3 s3Client;\r\n  ```\r\n  ```java\r\n  String filePath = \"upload/test.jpg\"; // 업로드할 파일 경로\r\n  \r\n  // S3 Client 생성\r\n  s3Client = AmazonS3ClientBuilder\r\n            .standard()\r\n            .withRegion(Regions.AP_NORTHEAST_2) // Region 설정\r\n            .build();    \r\n  \r\n  // Pre-Signed URL 만료 시간 설정 (10분 후)\r\n  Date expiration = new Date();\r\n  long expTimeMillis = expiration.getTime();\r\n  expTimeMillis += TimeUnit.MINUTES.toMillis(10);\r\n  expiration.setTime(expTimeMillis);\r\n  \r\n  // Upload Pre-Signed URL Generate (PUT Method)\r\n  GeneratePresignedUrlRequest generatePresignedUrlRequest =\r\n            new GeneratePresignedUrlRequest(bucket, filePath)\r\n                    .withMethod(HttpMethod.PUT)\r\n                    .withExpiration(expiration);\r\n  URL url = s3Client.generatePresignedUrl(generatePresignedUrlRequest);\r\n  \r\n  // 발급된 업로드용 Pre-Signed URL\r\n  String putPreSignedUrl = url.toString();\r\n  ```\r\n\r\n\r\n- 다운로드용 Presigned URL 발급\r\n  ```java\r\n  @Value(\"${cloud.aws.s3.bucket}\")\r\n  private String bucket;\r\n\r\n  AmazonS3 s3Client;\r\n  ```\r\n  ```java\r\n  String filePath = \"upload/test.jpg\"; // 다운로드할 파일 경로t\r\n  \r\n  // S3 Client 생성\r\n  s3Client = AmazonS3ClientBuilder\r\n            .standard()\r\n            .withRegion(Regions.AP_NORTHEAST_2) // Region 설정\r\n            .build();    \r\n\r\n  // Pre-Signed URL 만료 시간 (10분 후)\r\n  Date expiration = new Date();\r\n  long expTimeMillis = expiration.getTime();\r\n  expTimeMillis += TimeUnit.MINUTES.toMillis(10);\r\n  expiration.setTime(expTimeMillis);\r\n  \r\n  // Download Pre-Signed URL Generate (GET Method)\r\n  GeneratePresignedUrlRequest generatePresignedUrlRequest =\r\n            new GeneratePresignedUrlRequest(bucket, filePath)\r\n                    .withMethod(HttpMethod.GET)\r\n                    .withExpiration(expiration);\r\n  URL url = s3Client.generatePresignedUrl(generatePresignedUrlRequest);\r\n  \r\n  // 발급된 다운로드용 Pre-Signed URL\r\n  String putPreSignedUrl = url.toString();\r\n  ```\r\n\r\n\r\n## 👋\r\nSpringBoot에서 S3Client를 사용해서 Presigned URL을 발급받는 방법에 대해서 알아보았다.\r\n다음 포스팅에서는 React에서 발급받은 Presigned URL을 사용해서 파일을 업로드/다운로드 하는 방법에 대해서 작성해보려고 한다.\r\n"},{"excerpt":"☀️ 테스트 환경 OpenJDK 17.0.2 Gradle 8.0.2 Spring Boot 3.0.5 ✋ 들어가며 @Scheduled Annotation으로 정해진 시간에 수행되는 메소드를 구현했다.\n해당 Annotation을 사용하는 메소드 내에서 정상 여부의 로그를 남기기 위해서는 똑같은 소스를 매번 작성해야하는 문제가 발생했다. 그리하여 @Schedul…","fields":{"slug":"/spring-custom-annotation/"},"frontmatter":{"date":"January 20, 2025","title":"Spring Custom Annotation 만들기 (Feat. AOP)","tags":["spring","springboot","aop"],"emoji":"🌱","series":null},"rawMarkdownBody":"\r\n## ☀️ 테스트 환경\r\n> - OpenJDK 17.0.2\r\n> - Gradle 8.0.2\r\n> - Spring Boot 3.0.5\r\n\r\n## ✋ 들어가며\r\n_@Scheduled_ Annotation으로 정해진 시간에 수행되는 메소드를 구현했다.\r\n해당 Annotation을 사용하는 메소드 내에서 정상 여부의 로그를 남기기 위해서는 똑같은 소스를 매번 작성해야하는 문제가 발생했다.\r\n\r\n그리하여 _@Scheduled_ Annotation을 커스텀하고 AOP를 활용하여 해당 Annotation을 사용할때 로그를 남기도록 구현해보고자한다.\r\n\r\n#### ***문제의 소스***\r\n\r\n> ⚠️ ***로그를 남기기 위해서 매번 같은 소스가 작성되어 있다.***\r\n> - logService.insertLog(result);\r\n\r\n```Java\r\n@Component\r\npublic class ScheduledComponent {\r\n    @Scheduled(cron= \"0 0 0 * * *\")\r\n    public Map<String, Object> scheduled1() {\r\n        ...\r\n        // 로그 저장\r\n        logService.insertLog(result);\r\n        ...\r\n        return result;\r\n    }\r\n    @Scheduled(cron= \"0 0 1 * * *\")\r\n    public int scheduled2() {\r\n        ...\r\n        // 로그 저장\r\n        logService.insertLog(result);\r\n        ...\r\n        return result;\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\n## 🧰 AOP를 통한 Custom Annotation 처리\r\n\r\n#### ***CustomScheduled.java***\r\n1. @Target : Annotation이 적용될 위치\r\n    - @CustomScheduled를 메소드에 적용하기 위해서 `ElementType.METHOD` 사용\r\n2. @Retention : Annotation이 적용될 범위\r\n    - 런타임까지 유지되는 Annotation을 정의하기 위해서 `RetentionPolicy.RUNTIME` 사용 \r\n3. @Scheduled : Scheduled Annotation과 같은 동작을 위해서 사용\r\n```Java\r\n@Target(ElementType.METHOD)\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Scheduled\r\npublic @interface CustomScheduled {\r\n    String cron() default \"\";\r\n}\r\n```\r\n\r\n#### ***CustomScheduledAspect.java*** ###\r\n1. AOP가 구현된 클래스에는 *@Aspect* Annotation을 사용한다. \r\n2. 해당 클래스의 메소드에는 AOP를 적용할 패턴 혹은 관심사를 구현할 수 있다.\r\n    - @Before : 패턴이 실행되기 전에 동작\r\n    - @After : 패턴이 실행된 이후에 동작\r\n    - @Around : 패턴이 실행되기 전, 후 모두 동작 (실행결과 반환을 위해 반환 값은 Object)\r\n3. 예제에서는 *@CustomScheduled*가 사용된 클래스명, 메소드명 그리고 결과를 로그 테이블에 저장하고 있다 \r\n```Java\r\n@Aspect\r\n@Component\r\npublic class CustomScheduledAspect {\r\n\r\n    @Around(\"@annotation(customScheduled)\")\r\n    public Object handleWsfScheduled(ProceedingJoinPoint joinPoint, CustomScheduled customScheduled) throws Throwable {\r\n\r\n        MethodSignature signature = (MethodSignature) joinPoint.getSignature();\r\n\r\n        // 실행\r\n        Object result = joinPoint.proceed();\r\n\r\n        Map<String, Object> logParam = new HashMap<String, Object>();\r\n        logParam.put(\"className\", joinPoint.getSignature().getDeclaringTypeName());\r\n        logParam.put(\"methodName\", joinPoint.getSignature().getName());\r\n        logParam.put(\"result\", result.toString());\r\n\r\n        // 배치 로그 저장\r\n        logService.insertLog(param);\r\n\r\n        return result;\r\n\r\n    }\r\n}\r\n```\r\n\r\n#### ***Custom Annotation 사용***\r\n> ☑️ *@CustomScheduled*를 사용하면 로그 관련 처리는 AOP에서 하고 있기 때문에 메소드에는 비즈니스 로직 수행 및 결과 반환에 대한 소스만 작성되어 있다. \r\n\r\n```Java\r\n@Component\r\npublic class ScheduledComponent {\r\n    @CustomScheduled(cron= \"0 0 0 * * *\")\r\n    public Map<String, Object> scheduled1() {\r\n        ...\r\n        return result;\r\n    }\r\n    @CustomScheduled(cron= \"0 0 1 * * *\")\r\n    public Map<String, Object> scheduled2() {\r\n        ...\r\n        return result;\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\n## 👋\r\n\r\n"},{"excerpt":"☀️ 테스트 환경 node v20.16.0 yarn 1.22.22 react ^18.2.0 ⛔ ERROR 어제까지는 잘 되던게 갑자기 안됨 yarn.lock 파일삭제하고 다시  실행 후 를 수행하면 아래와 같은 오류가 발생한다. ❓ 왜 설지된 패키지(@types/react) 버전이 이상하다 문제의 패키지 버전을 으로 명시해놓고 사용하는데  이후 생성된 ya…","fields":{"slug":"/react-error-slider-cannot-be-used-as-a-jsx-component/"},"frontmatter":{"date":"January 20, 2025","title":"ERROR. 'Slider' cannot be used as a JSX component.","tags":["react","error"],"emoji":"️🌋","series":null},"rawMarkdownBody":"\r\n## ☀️ 테스트 환경\r\n> - node v20.16.0\r\n> - yarn 1.22.22\r\n> - react ^18.2.0\r\n\r\n## ⛔ ERROR\r\n\r\n#### ***어제까지는 잘 되던게 갑자기 안됨***\r\n- _yarn.lock_ 파일삭제하고 다시 `yarn install` 실행 후 `build`를 수행하면 아래와 같은 오류가 발생한다.\r\n\r\n```javascript\r\nerror TS2322: Type '{ children: Element[]; dots: boolean; infinite: boolean; speed: number; slidesToShow: number; slidesToScroll: number; autoplay: boolean; autoplaySpeed: number; centerMode: boolean; swipeToSlide: boolean; ... 5 more ...; ref: RefObject<...>; }' is not assignable to type 'Readonly<Settings>'.\r\n  Types of property 'appendDots' are incompatible.\r\n    Type '(dots: ReactNode) => JSX.Element' is not assignable to type '(dots: ReactNode) => Element'.\r\n      Types of parameters 'dots' and 'dots' are incompatible.\r\n        Type 'import(\"~~\").ReactNode' is not assignable to type 'React.ReactNode'.\r\n          Type 'bigint' is not assignable to type 'ReactNode'.\r\n\r\n        <Slider ref={sliderRef} {...settings}>\r\n```\r\n\r\n```javascript\r\nerror TS2786: 'Slider' cannot be used as a JSX component.\r\nIts type 'typeof Slider' is not a valid JSX element type.\r\nTypes of construct signatures are incompatible.\r\nType 'new (props: Settings) => Slider' is not assignable to type 'new (props: any, deprecatedLegacyContext?: any) => Component<any, any, any>'.\r\nProperty 'refs' is missing in type 'Slider' but required in type 'Component<any, any, any>'.\r\n\r\n        <Slider ref={sliderRef} {...settings}>\r\n```\r\n\r\n## ❓ 왜\r\n\r\n#### ***설지된 패키지(@types/react) 버전이 이상하다***\r\n- 문제의 패키지 버전을 `^18.2.43`으로 명시해놓고 사용하는데 `yarn install` 이후 생성된 _yarn.lock_ 파일에는 `19.0.1`로 설치가 되었다.\r\n\r\n```json\r\n// package.json\r\n\r\n...\r\n\"devDependencies\": {\r\n  \"@types/react\": \"^18.2.43\",\r\n...\r\n```\r\n\r\n```json\r\n// yarn.lock\r\n\r\n...\r\n\"@types/react@*\", \"@types/react@>=16\":\r\n  version \"19.0.1\"\r\n  resolved \"https://~~~\"\r\n  integrity ~~~\r\n  dependencies:\r\n    csstype \"^3.0.2\"\r\n...\r\n```\r\n\r\n#### ***하위 의존성 패키지 문제***\r\n- _package.json_ 에 명시되어있는 몇개의 패키지가 하위 의존성 패키지로 _@types/react_ 의 버전을 `19.0.1`로 불러오고 있었다. 아래 두가지 패키지가 문제였다.\r\n\r\n```JSON\r\n// package.json\r\n\r\n...\r\n\"dependencies\": {\r\n  \"@mui/material\": \"^5.15.0\",        \r\n},\r\n\"devDependencies\": {\r\n  \"@types/react-slick\": \"^0.23.13\" ,\r\n...\r\n```\r\n\r\n## ✅ 해결\r\n\r\n#### ***하위 패키지 버전 명시***\r\n- 여러 패키지가 동일한 의존성을 가질 때 버전을 일관되게 유지할 수 있도록 [resuolutions↗](https://classic.yarnpkg.com/lang/en/docs/selective-version-resolutions/)를 사용 할 수 있다.\r\n\r\n```JSON\r\n// package.json\r\n\r\n...\r\n\"resolutions\": {\r\n  \"@types/react\": \"^18.2.43\",\r\n}\r\n```\r\n\r\n## 👋 마치며\r\n별게 다 속을 썩인다.\r\n\r\n"},{"excerpt":"☀️ 테스트 환경 PostgreSQL 16.1 (Amazon Aurora) Amazon Aurora↗는 MySQL 및 PostgreSQL과 호환되는 완전 관리형 관계형 데이터베이스 엔진이다. ✋ 들어가며 database를 통으로 날려버리기 위해서 문제의 쿼리를 실행하다가 오류를 발견했다.\n없어질 건 없어져야 하기 대문에 세션을 종료하고 쿼리를 실행하는걸로 …","fields":{"slug":"/postgresql-session-kill/"},"frontmatter":{"date":"January 20, 2025","title":"PostgreSQL 세션 정보 확인 및 종료","tags":["postgresql"],"emoji":"💣","series":null},"rawMarkdownBody":"\r\n## ☀️ 테스트 환경\r\n> - PostgreSQL 16.1 (Amazon Aurora)\r\n>   - [Amazon Aurora↗](https://docs.aws.amazon.com/ko_kr/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html)는 MySQL 및 PostgreSQL과 호환되는 완전 관리형 관계형 데이터베이스 엔진이다.\r\n\r\n## ✋ 들어가며\r\ndatabase를 통으로 날려버리기 위해서 문제의 쿼리를 실행하다가 오류를 발견했다.\r\n없어질 건 없어져야 하기 대문에 세션을 종료하고 쿼리를 실행하는걸로 해결.\r\n\r\n#### ***문제의 쿼리***\r\n```SQL\r\ndrop database _YOUR_DATABASE_NAME_;\r\n```\r\n\r\n#### ***오류 내용***\r\n```Bash\r\n[55006] ERROR: database \"_YOUR_DATABASE_NAME_\" is being accessed by other users\r\nDetail: There are `n` other sessions using the database.\r\n```\r\n\r\n\r\n## 🧹 세션 정보 확인\r\npg_stat_activity 테이블에서 접속중인 세션 정보를 확인한다.\r\n\r\n```SQL\r\nselect pid\r\n    , usename\r\n    , application_name \r\n    , client_addr\r\nfrom pg_stat_activity\r\nwhere datname = '_YOUR_DATABASE_NAME_';\r\n```\r\n\r\n\r\n## 🧲 세션 종료\r\n\r\n#### ***단건 종료 처리***\r\n```SQL\r\nselect pg_terminate_backend(pid);\r\n```\r\n\r\n#### ***일괄 종료 처리***\r\n```SQL\r\nselect pg_terminate_backend(pid)\r\nfrom pg_stat_activity\r\nwhere datname = '_YOUR_DATABASE_NAME_';\r\n```\r\n\r\n## 👋\r\n\r\n"},{"excerpt":"☀️ 테스트 환경 Amazon Linux 2023 (EC2) PostgreSQL 17.2 ✋ 들어가며 AWS EC2 환경에 PostgreSQL 17 버전을 설치했는데 공식 문서↗를 보고 설치하려 했으나 생각처럼 순탄하게 되지 않아서 수동 설치를 하기로 했다. 💾 PostgreSQL 다운로드 다운로드 링크 확인 여기↗에서 원하는 버전을 선택하고 postgre…","fields":{"slug":"/amazon-linux-postgresql-17-install/"},"frontmatter":{"date":"January 20, 2025","title":"Amazon Linux에 PostgreSQL 수동 설치","tags":["aws","ec2","amazon-linux","linux","postgresql"],"emoji":"🗄️","series":null},"rawMarkdownBody":"\r\n## ☀️ 테스트 환경\r\n> - Amazon Linux 2023 (EC2)\r\n> - PostgreSQL 17.2\r\n\r\n## ✋ 들어가며\r\nAWS EC2 환경에 PostgreSQL 17 버전을 설치했는데 [공식 문서↗](https://www.postgresql.org/download/linux/redhat/)를 보고 설치하려 했으나 생각처럼 순탄하게 되지 않아서 수동 설치를 하기로 했다.\r\n\r\n## 💾 PostgreSQL 다운로드\r\n\r\n#### ***다운로드 링크 확인***\r\n[여기↗](https://ftp.postgresql.org/pub/source/)에서 원하는 버전을 선택하고 postgresql-[_VERSION_].tar.gz의 링크를 복사한다. (EC2에 직접 업로드 하는 경우는 다운로드 후 원하는 위치에 업로드한다.)\r\n\r\n#### ***필수 패키지 설치***\r\n```Shell\r\nsudo yum -y install gcc gcc-c++ make autoconf readline readline-devel zlib zlib-devel openssl openssl-devel gettext gettext-devel python python-devel bison flex perl\r\n```\r\n\r\n#### ***다운로드 및 압축해제***\r\n```Shell\r\nsudo wget https://ftp.postgresql.org/pub/source/v17.2/postgresql-17.2.tar.gz\r\n```\r\n\r\n```Shell\r\nsudo tar zxvf postgresql-17.2.tar.gz\r\n```\r\n\r\n\r\n## 🚀 PostgreSQL 설치\r\n미리 설치 폴더와 data 폴더를 생성해둔다. (e.g. /postgresql-17.2, /postgresql-17.2/data) \r\n\r\n#### ***소스 코드 빌드***\r\n```Shell\r\nsudo ./configure --prefix=/postgresql-17.2 --with-openssl --sysconfdir=/postgresql-17.2/data\r\n```\r\n\r\n_configure: error: ICU library not found_ 에러 발생시 _--without-icu_ 옵션을 추가한다.\r\n\r\n```Shell\r\nsudo ./configure --prefix=/postgresql-17.2 --with-openssl --sysconfdir=/postgresql-17.2/data --without-icu\r\n```\r\n\r\n#### ***컴파일 및 설치***\r\n```Shell\r\nsudo make\r\nsudo make install\r\n```\r\n\r\n## 💿 실행\r\n\r\n#### ***설치 폴더 소유권 변경***\r\nPostgreSQL은 sudo 권한으로 실행시 오류가 발생하기 떄문에 설치된 폴더의 소유권을 변경해준다.\r\n\r\n```Shell\r\nsudo useradd postgres\r\nsudo chown -R postgres:postgres /postgresql-17.2\r\n```\r\n\r\n``` Shell\r\n✔\r\ndrwxr-xr-x.  7 postgres postgres    68 Jan  2 04:53 postgresql-17.2\r\n...\r\n```\r\n\r\n#### ***환경 변수 설정***\r\n위에서 생성한 계정에 PATH를 설정한다.\r\n```Shell\r\nsudo su - postgres\r\nvi ~/.bashrc\r\n```\r\n```Shell\r\n...\r\nexport PATH=\"$PATH:/postgresql-17.2/bin\"\r\n...\r\n```\r\n\r\n#### ***초기화***\r\n```Shell\r\ninitdb -E utf-8 -D /postgresql-17.2/data\r\n```\r\n\r\n#### ***실행 및 확인***\r\n```Shell\r\npg_ctl -D /postgresql-17.2/data start\r\n```\r\n```Shell\r\npsql -d postgres\r\n```\r\n```Shell\r\n✔\r\npsql (17.2)\r\nType \"help\" for help.\r\n\r\npostgres=#\r\n```\r\n\r\n## 👋\r\n\r\n"},{"excerpt":"☀️ 테스트 환경 Jenkins 2.387.3 Amazon Linux 2023 (EC2)  ✋ 들어가며 젠킨스가 설치되어있는 서버와 실제로 어플리케이션이 배포될 대상 서버가 다른 경우에 SSH Agent 를 이용한 원격 배포 방법도 있겠지만 이 글에서는 Jenkins Node Agent를 활용한 방법을 다뤄보려고한다. 🔑 SSH Key 생성 및 복사 SSH…","fields":{"slug":"/jenkins-agent-node-ssh/"},"frontmatter":{"date":"January 20, 2025","title":"Jenkins Agent Node 설정하기","tags":["jenkins"],"emoji":"🤖","series":null},"rawMarkdownBody":"\r\n## ☀️ 테스트 환경\r\n> - Jenkins 2.387.3\r\n> - Amazon Linux 2023 (EC2) \r\n\r\n## ✋ 들어가며\r\n젠킨스가 설치되어있는 서버와 실제로 어플리케이션이 배포될 대상 서버가 다른 경우에 _SSH Agent_ 를 이용한 원격 배포 방법도 있겠지만 이 글에서는 Jenkins Node Agent를 활용한 방법을 다뤄보려고한다.\r\n\r\n\r\n## 🔑 SSH Key 생성 및 복사\r\nSSH를 활용해서 Agent를 시작하는 방식을 선택하려고 하기 떄문에 Agent가 동작할 서버에서 SSH Key를 생성한다. \r\n\r\n#### ***ssh-keygen***\r\n1. 놀랍게도 Enter의 입력만으로 SSH Key가 생성된다.\r\n```shell\r\ncd ~/.ssh\r\nssh-keygen -t rsa\r\n```\r\n```shell\r\n✔\r\nYour identification has been saved in /home/rundevelrun/.ssh/id_rsa.\r\nYour public key has been saved in /home/rundevelrun/.ssh/id_rsa.pub.\r\nThe key fingerprint is:\r\nSHA256:~~~\r\nThe key's randomart image is:\r\n+---[RSA 2048]----+\r\n| ...             |\r\n+----[SHA256]-----+\r\n```\r\n2. ~/.ssh 경로에 아래와 같은 파일들이 생성되었다면 성공이다.\r\n```shell\r\nls -al\r\n```\r\n```shell\r\n✔\r\n-rw------- 1 rundevelrun rundevelrun  401 Aug  5 05:45 authorized_keys\r\n-rw------- 1 rundevelrun rundevelrun 1679 Dec 12 02:22 id_rsa\r\n-rw-r--r-- 1 rundevelrun rundevelrun  438 Dec 12 02:22 id_rsa.pub\r\n```\r\n\r\n#### ***SSH Key 확인*** {id=\"ssh-key_1\"}\r\n*id_rsa* 파일을 열어서 내용을 확인하고 Jenkins 설정에 사용해야하기 때문에 복사해둔다.\r\n```shell\r\ncat id_rsa\r\n```\r\n```shell\r\n✔\r\n-----BEGIN RSA PRIVATE KEY-----\r\nMIIEowIBA...\r\n\r\n\r\n-----END RSA PRIVATE KEY-----\r\n```\r\n\r\n## 🔐 Jenkins Credentials 설정\r\n\r\n#### ***등록 화면 접속***\r\n*Dashboard ➡ Jenkins 관리 ➡ Credentials  ➡  System ➡ Global credentials (unrestricted) ➡ Add Credentials*\r\n\r\n#### ***Credentials 생성***\r\n- Kind : SSH Username with private key\r\n- Scope : Global\r\n- ID : 젠킨스에서 사용하는 중복되지 않는 Credential ID\r\n- Description : 설명\r\n- Username : SSH Key를 생성한 계정\r\n- Private Key : `Enter directly`를 체크하고 위에서 복사한 SSH Key를 입력\r\n\r\n![](images/20241212_144903.png)\r\n\r\n## 💼 Jenkins Node 설정\r\n\r\n#### ***등록 화면 접속***\r\n*Dashboard ➡ Jenkins 관리 ➡ 노드 관리  ➡  New Node*\r\n\r\n노드명 입력 및 Permanent Agent에 체크하고 다음으로 넘어간다.\r\n![](images/20241212_150059.png)\r\n\r\n#### ***Node 생성***\r\n- Name : 노드명\r\n- Description : 설명\r\n- Number of executors : 노드에서 수행할 수 있는 동시 빌드 수\r\n- Remote root directory : Agent가 사용할 디렉토리\r\n- Labels : Jenkinsfile에서 사용할 Label\r\n- Launch method : label이 일치할때만 빌드가 실핼되도록 `Only build jobs...` 선택\r\n  - Host : 원격지 IP\r\n  - Credentials : 앞에서 등록한 Credential 선택\r\n  - Host Key Verification Strategy : 호스트 키 검증 전략 (검증하지 않는 전략을 사용하도록 설정)\r\n- Availability : Agent를 온라인 상태로 유지하도록 `Keep this agent online as...` 선택\r\n\r\n![](images/20241212_153946.png)\r\n\r\n## 📌 사용 예시 (Jenkinsfile Pipeline)\r\nAgent 설정을 마쳤으니 마지막으로 Jenkins Pipeline에서 어떻게 Agent를 사용하는지 확인할 차례다.\r\n\r\n#### ***Pipeline 전체에 적용***\r\n```Groovy\r\npipeline {\r\n    agent {\r\n        label 'rundevelrun_node'\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\n#### ***특정 stage에만 적용***\r\n```Groovy\r\npipeline {\r\n    agent any\r\n    stages {\r\n        stage('rundevelrun stage') {\r\n            agent {\r\n                label 'rundevelrun_node'\r\n            }\r\n            steps {\r\n                // rundevelrun_node agent가 수행할 작업\r\n            }\r\n        }\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\n## 👋 마치며\r\nJenkins Node Agent를 사용해서 원격 서버에 배포하는 방식을 기록해봤는데 곧  _SSH Agent_ 를 활용하는 방법도 기록해야겠다.\r\n\r\n"},{"excerpt":"☀️ 테스트 환경 Amazon Linux 2023 (EC2) OpenJDK 17.0.2 ✋ 들어가며 AWS EC2 환경에 공식 문서↗를 보고 Jenkins를 설치했다.\n여기까지 찾아온 방문자에게는 고맙고 미안하지만 블로그 글 보다는 역시 공식 문서를 활용하는게 더 좋다. 🚀 Jenkins 다운로드 및 설치 ☑️ JDK가 설치되어있는 환경이라 생략되어있지만 먼…","fields":{"slug":"/amazon-linux-jenkins-install/"},"frontmatter":{"date":"January 20, 2025","title":"Amazon Linux에 Jenkins 설치하기","tags":["aws","ec2","amazon-linux","linux","jenkins"],"emoji":"🏗️","series":null},"rawMarkdownBody":"\r\n## ☀️ 테스트 환경\r\n> - Amazon Linux 2023 (EC2)\r\n> - OpenJDK 17.0.2\r\n\r\n## ✋ 들어가며\r\nAWS EC2 환경에 [공식 문서↗](https://www.jenkins.io/doc/tutorials/tutorial-for-installing-jenkins-on-AWS/#downloading-and-installing-jenkins)를 보고 Jenkins를 설치했다.\r\n여기까지 찾아온 방문자에게는 고맙고 미안하지만 블로그 글 보다는 역시 공식 문서를 활용하는게 더 좋다.\r\n\r\n## 🚀 Jenkins 다운로드 및 설치\r\n\r\n> ☑️ JDK가 설치되어있는 환경이라 생략되어있지만 먼저 JDK를 꼭 설치해주자\r\n\r\n#### ***패키지 업데이트***\r\n```shell\r\nsudo yum update -y\r\n```\r\n\r\n#### ***Jenkins Repo 추가***\r\n```shell\r\nsudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo\r\n```\r\n\r\n#### ***패키지 설치를 활성화하기 위한 키 파일 Import***\r\n```shell\r\nsudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key\r\n```\r\n\r\n#### ***Jenkins 설치*** {id=\"jenkins install\"}\r\n```shell\r\nsudo yum install jenkins -y\r\n```\r\n\r\n#### ***부팅시 시작되는 서비스 등록***\r\n```shell\r\nsudo systemctl enable jenkins\r\n```\r\n\r\n#### ***Jenkins 시작*** {id=\"jenkins start\"}\r\n```shell\r\nsudo systemctl start jenkins\r\n```\r\n\r\n#### ***Jenkins 상태 확인*** {id=\"jenkins status check\"}\r\n```shell\r\nsudo systemctl status jenkins\r\n```\r\n```shell\r\n✔\r\n● jenkins.service - Jenkins Continuous Integration Server\r\n   Loaded: loaded (/usr/lib/systemd/system/jenkins.service; enabled; vendor preset: disabled)\r\n   Active: active (running) since Wed 2024-12-18 01:26:13 UTC; 3h 22min ago\r\n...\r\n```\r\n\r\n## ⛔ 예상되는 오류\r\n필자는 운이 좋게도 한번에 시작이 되었지만 시작시 알 수 없는 오류에 시달릴 수도 있다. 시달리는 중이라면 왜 시달리고 있는지 상세 오류 내용을 확인해보자.\r\n\r\n```shell\r\nsudo journalctl -xe\r\n```\r\n\r\n#### ***jenkins: failed to find a valid Java installation***\r\n\r\n- 오류 내용\r\n```shell\r\n-- Unit jenkins.service has begun starting up.\r\njenkins[25524]: jenkins: failed to find a valid Java installation\r\nsystemd[1]: jenkins.service: main process exited, code=exited, status=1/FAILURE\r\nsystemd[1]: Failed to start Jenkins Continuous Integration Server.\r\n-- Subject: Unit jenkins.service has failed\r\n-- Defined-By: systemd\r\n-- Support: http://lists.freedesktop.org/mailman/listinfo/systemd-devel\r\n--\r\n-- Unit jenkins.service has failed.\r\n--\r\n-- The result is failed.\r\n```\r\n\r\n- 해결 : JAVA_HOME에 JDK 설치 경로를 설정해주면 끝.\r\n```shell\r\nsudo vi /usr/lib/systemd/system/jenkins.service\r\n```\r\n```shell\r\n...\r\n# The Java home directory. When left empty, JENKINS_JAVA_CMD and PATH are consulted.\r\nEnvironment=\"JAVA_HOME=[JDK 설치 경로]\"\r\n...\r\n```\r\n```shell\r\nsudo systemctl daemon-reload\r\n```\r\n\r\n#### ***Failed to bind to 0.0.0.0/0.0.0.0:8080***\r\n다른 프로세스에서 사용중인 포트인 경우 이런 오류를 만날 수 있고 다른 프로세스의 포트를 변경하든 젠킨스 포트를 변경하든 해야하는데 우리는 젠킨스 포트를 변경해보자.\r\n\r\n- 오류 내용\r\n```java\r\njenkins[16253]: Caused: java.io.IOException: Failed to bind to 0.0.0.0/0.0.0.0:8080\r\njenkins[16253]: at Jenkins Main ClassLoader//org.eclipse.jetty.server.ServerConnector.openAcceptChannel(ServerConnector.java:349)\r\njenkins[16253]: at Jenkins Main ClassLoader//org.eclipse.jetty.server.ServerConnector.open(ServerConnector.java:313)\r\njenkins[16253]: at Jenkins Main ClassLoader//org.eclipse.jetty.server.Server.lambda$doStart$0(Server.java:552)\r\njenkins[16253]: at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)\r\njenkins[16253]: at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\r\njenkins[16253]: at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)\r\njenkins[16253]: at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)\r\njenkins[16253]: at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\r\njenkins[16253]: at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\r\njenkins[16253]: at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)\r\njenkins[16253]: at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)\r\njenkins[16253]: at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\r\njenkins[16253]: at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)\r\njenkins[16253]: at Jenkins Main ClassLoader//org.eclipse.jetty.server.Server.doStart(Server.java:548)\r\njenkins[16253]: at Jenkins Main ClassLoader//org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:93)\r\njenkins[16253]: at Jenkins Main ClassLoader//winstone.Launcher.<init>(Launcher.java:190)\r\njenkins[16253]: Caused: java.io.IOException: Failed to start Jetty\r\njenkins[16253]: at Jenkins Main ClassLoader//winstone.Launcher.<init>(Launcher.java:194)\r\njenkins[16253]: at Jenkins Main ClassLoader//winstone.Launcher.main(Launcher.java:490)\r\njenkins[16253]: at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\njenkins[16253]: at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\r\njenkins[16253]: at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\njenkins[16253]: at java.base/java.lang.reflect.Method.invoke(Method.java:568)\r\njenkins[16253]: at executable.Main.main(Main.java:335)\r\nsystemd[1]: jenkins.service: main process exited, code=exited, status=1/FAILURE\r\nsystemd[1]: Failed to start Jenkins Continuous Integration Server.\r\n-- Subject: Unit jenkins.service has failed\r\n-- Defined-By: systemd\r\n-- Support: http://lists.freedesktop.org/mailman/listinfo/systemd-devel\r\n--\r\n-- Unit jenkins.service has failed.\r\n--\r\n-- The result is failed.\r\n```\r\n\r\n- 해결\r\n    \r\n    ```shell\r\n    sudo vi /usr/lib/systemd/system/jenkins.service\r\n    ```\r\n    ```shell\r\n    ...\r\n    # Port to listen on for HTTP requests. Set to -1 to disable.\r\n    # To be able to listen on privileged ports (port numbers less than 1024),\r\n    # add the CAP_NET_BIND_SERVICE capability to the AmbientCapabilities\r\n    # directive below.\r\n    Environment=\"JENKINS_PORT=[변경할 포트]\"\r\n    ...\r\n    ```\r\n    ```shell\r\n    sudo systemctl daemon-reload\r\n    ```\r\n\r\n## 👋\r\n\r\n"},{"excerpt":"☀️ 테스트 환경 Amazon Linux 2023 (EC2) Docker 20.10.25 ✋ 들어가며 운영중인 시스템에서 Docker Root Directory를 변경해야하는 일이 생겨버렸다. 기본 설정의 Root Directory가 루트(/) 볼륨에 잡혀있어서 내부 정책상 다른 볼륨으로 옮겨가야했다. 💾 신규 디렉토리로 데이터 복사 기존 디렉토리 확인 도…","fields":{"slug":"/docker-root-directory-change/"},"frontmatter":{"date":"January 20, 2025","title":"Docker Root Directory 변경","tags":["aws","ec2","amazon-linux","linux","docker"],"emoji":"🐳","series":null},"rawMarkdownBody":"\r\n\r\n## ☀️ 테스트 환경\r\n> - Amazon Linux 2023 (EC2)\r\n> - Docker 20.10.25\r\n\r\n## ✋ 들어가며\r\n운영중인 시스템에서 Docker Root Directory를 변경해야하는 일이 생겨버렸다. 기본 설정의 Root Directory가 루트(/) 볼륨에 잡혀있어서 내부 정책상 다른 볼륨으로 옮겨가야했다.\r\n\r\n## 💾 신규 디렉토리로 데이터 복사\r\n\r\n#### ***기존 디렉토리 확인***\r\n도커 명령어를 이용해서 기존 디렉토리가 어디로 잡혀있는지 확인해보자. 필자의 경우 별도의 설정이 없었기에 기본 경로로 설정되어 있다.\r\n```shell\r\ndocker info\r\n```\r\n```shell\r\n✔\r\n...\r\nDocker Root Dir: /var/lib/docker\r\n...\r\n```\r\n\r\n#### ***신규 디렉토리 생성***\r\nDocker Root Directory로 사용할 신규 디렉토리를 생성해주자. 예제에서는 루트 볼륨과 분리되어있는 별도의 볼륨(/data)으로 진행했다.\r\n```shell\r\ncd /data\r\nmkdir docker\r\n```\r\n\r\n#### ***데이터 복사***\r\n운영중인 시스템이기 때문에 기존에 사용하던 디렉토리를 신규 디렉토리로 옮겨야했다.\r\n```shell\r\ncp -a /var/lib/docker/* /data/docker\r\n```\r\n\r\n## 🐳 data-root 설정\r\n\r\n#### ***첫번째 방법***\r\n_daemon.json_ 파일을 수정한다. (없으면 당황하지 말고 생성해주자)\r\n```shell\r\nsudo /etc/docker/daemon.json\r\n```\r\n```json\r\n{\r\n    \"data-root\": \"/data/docker/\",\r\n    ...\r\n}\r\n```\r\n\r\n\r\n#### ***두번째 방법***\r\n_docker.service_ 에서 ExecStart를 찾아서 --data-root를 추가한다.\r\n```shell\r\nsudo vi /usr/lib/systemd/system/docker.service\r\n```\r\n```shell\r\nExecStart=/usr/bin/dockerd --data-root /data/docker -H fd:// ...\r\n```\r\n\r\n## 🔄 재시작\r\n재시작은 언제나 제일 무서운 타이밍이 아닐까\r\n\r\n#### ***서비스 재시작***\r\n```shell\r\nsudo systemctl stop docker\r\nsudo systemctl daemon-reload # docker.service를 수정한 경우에만\r\nsudo systemctl start docker\r\n```\r\nor\r\n```shell\r\nsudo systemctl daemon-reload # docker.service를 수정한 경우에만\r\nsudo systemctl restart docker\r\n```\r\n\r\n#### ***컨테이너 재시작***\r\n구동중인 프로세스가 있는 경우 컨테이너도 재시작하자.\r\n\r\n- 컨테이너 ID 확인\r\n```shell\r\ndocker ps\r\n```\r\n```shell\r\n✔\r\nCONTAINER ID   IMAGE    ...\r\naaaaaaaaaaaa   ...\r\nbbbbbbbbbbbb   ...\r\ncccccccccccc   ...\r\n```\r\n\r\n- 컨테이너 재시작 \r\n```shell\r\ndocker restart aaaaaaaaaaaa bbbbbbbbbbbb cccccccccccc\r\n```\r\n\r\n## ✅ 정상 확인\r\n위 과정들을 마치면 드디어 변경된 Docker Root Directory를 볼 수 있다.\r\n\r\n```shell\r\ndocker info\r\n```\r\n```shell\r\n✔\r\n...\r\nDocker Root Dir: /data/docker\r\n...\r\n```\r\n\r\n## 👋\r\n\r\n"},{"excerpt":"☀️ 테스트 환경 Amazon Linux 2023 (EC2) OpenJDK 17.0.2 PostgreSQL 17.2 SonarQube 9.9 LTA  ✋ 소나큐브란? 소나큐브는 20개 이상의 프로그래밍 언어에서 버그, 코드 스멜, 보안 취약점을 발견할 목적으로 정적 코드 분석으로 자동 리뷰를 수행하기 위한 지속적인 코드 품질 검사용 오픈 소스 플랫폼이다. …","fields":{"slug":"/amazon-linux-sonarqube-install/"},"frontmatter":{"date":"January 20, 2025","title":"Amazon Linux SonarQube 설치","tags":["aws","ec2","amazon-linux","linux","sonarqube"],"emoji":"🔎","series":null},"rawMarkdownBody":"\r\n## ☀️ 테스트 환경\r\n> - Amazon Linux 2023 (EC2)\r\n> - OpenJDK 17.0.2\r\n> - PostgreSQL 17.2\r\n> - SonarQube 9.9 LTA \r\n\r\n## ✋ 소나큐브란?\r\n> 소나큐브는 20개 이상의 프로그래밍 언어에서 버그, 코드 스멜, 보안 취약점을 발견할 목적으로 정적 코드 분석으로 자동 리뷰를 수행하기 위한 지속적인 코드 품질 검사용 오픈 소스 플랫폼이다. 소나소스(SonarSource)가 개발하였다. 소나큐브는 중복 코드, 코딩 표준, 유닛 테스트, 코드 커버리지, 코드 복잡도, 주석, 버그 및 보안 취약점의 보고서를 제공한다.\r\n> <br/>\r\n> <br/>\r\n> 출처 : [위키백과↗](https://ko.wikipedia.org/wiki/소나큐브)\r\n\r\n## 📂 PostgreSQL User 및 Database 생성\r\n\r\n> ☑️ JDK와 PostgreSQL 등 지원 가능한 데이터베이스의 설치가 선행되어야 한다.\r\n> <br/>\r\n> <br/>\r\n> [PostgreSQL 설치 포스팅 바로가기↗](/amazon-linux-sonarqube-install)\r\n\r\n\r\n#### ***User 생성***\r\n```sql\r\nCREATE USER sonar PASSWORD 'sonar';\r\n```\r\n\r\n#### ***Database 생성***\r\n앞에서 생성한 'sonar' User를 owner로 설정\r\n```sql\r\nCREATE DATABASE sonar OWNER sonar;\r\n```\r\n\r\n#### ***권한 설정***\r\n```sql\r\nALTER ROLE sonar WITH createdb;\r\nGRANT ALL PRIVILEGES ON DATABASE sonar TO sonar;\r\n```\r\n\r\n\r\n## 🚀 SonarQube 다운로드 및 설치\r\n[소나큐브 다운로드 페이지↗](https://www.sonarsource.com/products/sonarqube/downloads/historical-downloads/)에서 원하는 버전을 다운로드하거나 링크를 복사해둔다.\r\n\r\n#### ***다운로드***\r\n원하는 위치에 다운로드한 파일을 업로드하거나 wget을 이용해서 다운로드 한다. \r\n```shell\r\nsudo wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.9.8.100196.zip\r\n```\r\n\r\n#### ***압축풀기***\r\n```shell\r\nsudo unzip sonarqube-9.9.8.100196.zip\r\n```\r\n\r\n#### ***sonar.properties 수정***\r\n_설치경로/conf/sonar.properties_\r\n \r\n1. 앞에서 설정한 Database의 정보를 입력한다\r\n2. 웹페이지에서 사용할 포트와 Elastic Search에서 사용할 포트를 수정한다\r\n   - 기본 포트를 사용해도 무방하고 당연한 말씀이지만 이미 사용중인 포트의 경우에는 오류를 만날 수 있다\r\n     ```properties\r\n     sonar.jdbc.username=sonar\r\n     sonar.jdbc.password=sonar\r\n     sonar.jdbc.url=jdbc:postgresql://localhost:5432/sonar\r\n     sonar.web.port=9002\r\n     sonar.search.port=9003\r\n     ...\r\n     ```\r\n\r\n#### ***실행***\r\n_설치경로/bin/linux-x86-64/sonar.sh_\r\n```shell\r\n./sonar.sh start\r\n```\r\n```shell\r\n✔\r\nStarting SonarQube...\r\nStarted SonarQube.\r\n```\r\n\r\n## ⛔ 예상되는 오류\r\n생각처럼 실행이 안된다면 _설치경로/logs/es.log_ 파일에서 오류를 확인해보자\r\n<br/>\r\n오류를 만나게 되더라도 누구나 겪을 수 있는 일이기 때문에 침착하게 수정하면 된다.\r\n\r\n#### ***can not run elasticsearch as root***\r\n\r\n#### 오류 내용\r\n```java\r\njava.lang.RuntimeException: can not run elasticsearch as root\r\n        at org.elasticsearch.bootstrap.Bootstrap.initializeNatives(Bootstrap.java:107) ~[elasticsearch-7.16.2.jar:7.16.2]\r\n        at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:183) ~[elasticsearch-7.16.2.jar:7.16.2]\r\n        at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:434) [elasticsearch-7.16.2.jar:7.16.2]\r\n        at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:166) [elasticsearch-7.16.2.jar:7.16.2]\r\n        at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:157) [elasticsearch-7.16.2.jar:7.16.2]\r\n        at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:77) [elasticsearch-7.16.2.jar:7.16.2]\r\n        at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:112) [elasticsearch-cli-7.16.2.jar:7.16.2]\r\n        at org.elasticsearch.cli.Command.main(Command.java:77) [elasticsearch-cli-7.16.2.jar:7.16.2]\r\n        at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:122) [elasticsearch-7.16.2.jar:7.16.2]\r\n        at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:80) [elasticsearch-7.16.2.jar:7.16.2]\r\n2025.01.02 06:49:40 ERROR es[][o.e.b.ElasticsearchUncaughtExceptionHandler] uncaught exception in thread [main]\r\norg.elasticsearch.bootstrap.StartupException: java.lang.RuntimeException: can not run elasticsearch as root\r\n        at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:170) ~[elasticsearch-7.16.2.jar:7.16.2]\r\n        at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:157) ~[elasticsearch-7.16.2.jar:7.16.2]\r\n        at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:77) ~[elasticsearch-7.16.2.jar:7.16.2]\r\n        at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:112) ~[elasticsearch-cli-7.16.2.jar:7.16.2]\r\n        at org.elasticsearch.cli.Command.main(Command.java:77) ~[elasticsearch-cli-7.16.2.jar:7.16.2]\r\n        at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:122) ~[elasticsearch-7.16.2.jar:7.16.2]\r\n        at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:80) ~[elasticsearch-7.16.2.jar:7.16.2]\r\nCaused by: java.lang.RuntimeException: can not run elasticsearch as root\r\n        at org.elasticsearch.bootstrap.Bootstrap.initializeNatives(Bootstrap.java:107) ~[elasticsearch-7.16.2.jar:7.16.2]\r\n        at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:183) ~[elasticsearch-7.16.2.jar:7.16.2]\r\n        at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:434) ~[elasticsearch-7.16.2.jar:7.16.2]\r\n        at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:166) ~[elasticsearch-7.16.2.jar:7.16.2]\r\n        ... 6 more\r\n```\r\n\r\n#### 해결\r\nelasticsearch는 root 권한으로 실행할 수 없기 때문에 소나큐브의 설치 경로의 소유자를 변경한다.\r\n<br/>\r\n필자의 경우 ec2-user를 사용해서 실행했지만 가능하면 소나큐브용 User와 Group을 생성해주자. \r\n```shell\r\nsudo chown -R ec2-user:ec2-user 설치경로\r\n```\r\n\r\n#### ***vm.max_map_count***\r\nElasticsearch를 실행하기 위해서는 vm.max_map_count 값이 최소 262144는 필요하다고 한다.\r\n\r\n#### 오류 내용\r\n```Shell\r\n[1] bootstrap checks failed. You must address the points described in the following [1] lines before starting Elasticsearch.\r\nbootstrap check failure [1] of [1]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]\r\n```\r\n\r\n#### 해결\r\n현재 설정된 vm.max_map_count 값을 확인해보자.\r\n```shell\r\nsysctl vm.max_map_count\r\n```\r\n```shell\r\n✔\r\nvm.max_map_count = 65530\r\n```\r\nvm.max_map_count 값이 최소 값보다 작게 설정이 되어있기 때문에 다시 설정해주면 해결\r\n```shell\r\nsudo sysctl -w vm.max_map_count=262144\r\n```\r\n\r\n## 👋\r\n다음 포스팅은 Jenkins 파이프라인에서 SonarQube를 활용한 정적 코드 분석을 해봐야겠다.\r\n\r\n"},{"excerpt":"☀️ 테스트 환경 AWS S3 Nexus 3.75.1-01 ✋ 들어가며 아직 Nexus가 설치되어있지 않다면 이전 포스팅↗을 확인 \nNexus를 설치했다면 데이터의 저장 위치를 설정해주어야 한다. 기본적으로는 Nexus 설치 위치 하위(sonatype-work/nexus3/blobs)에 구성이 되겠지만 이 포스팅에서는 일반 저장소보다 저렴한 S3를 활용하려…","fields":{"slug":"/nexus-connect-aws-s3/"},"frontmatter":{"date":"January 20, 2025","title":"Nexus에 AWS S3 연결하기 (Blob Stores)","tags":["aws","s3","nexus"],"emoji":"🪣","series":null},"rawMarkdownBody":"\r\n## ☀️ 테스트 환경\r\n> - AWS S3\r\n> - Nexus 3.75.1-01\r\n\r\n## ✋ 들어가며\r\n아직 Nexus가 설치되어있지 않다면 [이전 포스팅↗](/linux-swap-memory)을 확인 <br/>\r\nNexus를 설치했다면 데이터의 저장 위치를 설정해주어야 한다. 기본적으로는 Nexus 설치 위치 하위(*sonatype-work/nexus3/blobs*)에 구성이 되겠지만 이 포스팅에서는 일반 저장소보다 저렴한 S3를 활용하려고 한다.\r\n\r\n\r\n## 🔑 IAM 권한 사용자 생성 및 액세스 키 발급\r\n\r\n이 단계에서는 S3에 Access 할 수 있는 권한 사용자를 생성하고 Nexus 연동을 위한 AccessKey를 발급받는다.\r\n\r\n#### ***사용자 생성***\r\n\r\n1. 관리 계정으로 로그인 후 `보안 자격 증명` 메뉴 선택\r\n\r\n   ![](images/20250106_134503.png)\r\n\r\n2. *IAM ➡ 사용자 ➡ 사용자 생성*\r\n\r\n   ![](images/20250106_134635.png)\r\n\r\n3. 사용자 이름 입력\r\n\r\n   ![](images/20250106_134730.png)\r\n\r\n4. 권한 옵션은 `직접 정책 연결`로 선택하고 권한 정책에는 `AmazonS3FullAccesss` 정책을 선택한다\r\n\r\n   ![](images/20250106_134851.png)\r\n\r\n5. 입력 값들은 검토 후 사용자 생성을 완료한다\r\n\r\n   ![](images/20250106_134919.png)\r\n\r\n#### ***Access Key 발급***\r\n위 단계에서 S3 접근 권한 사용자를 생성했다면 접근할 수 있는 Access Key를 발급해야한다. <br/>\r\n이 과정은 AWS Console에서 이루어진다\r\n\r\n1. *IAM ➡ 사용자* 에서 생성한 사용자 선택\r\n\r\n   ![](images/20250106_134953.png)\r\n2. 하단 `보안 자격 증명` 탭에서 `액세스 키 만들기`를 선택\r\n\r\n   ![](images/20250106_135045.png)\r\n3. 사용 사례는 `CLI` 선택\r\n\r\n   ![](images/20250106_135151.png)\r\n4. 설명 태그 입력 후 `액세스 키 만들기` 클릭\r\n\r\n   ![](images/20250106_135456.png)\r\n5. 아래 화면과 같이 액세스키가 출력되는데 csv 파일로 다운로드하거나 키를 저장해두어야 한다\r\n\r\n   ![](images/20250106_135557.png)\r\n\r\n\r\n## 🔗 Nexus Blob Store에 S3 연결\r\n사용자 설정이 끝났다면 Nexus 관리자 페이지에서 간단하게 S3 Blob Store를 생성해주자\r\n\r\n#### ***Blob Store 생성***\r\n\r\n1. 관리계정으로 로그인 후 ⚙️ 화면으로 들어가서 *Blob Stores ➡ Create Blob Store* 클릭\r\n\r\n   ![](images/20250106_133114.png)\r\n2. 당연하게도 필수 입력값인 `Type`을 `S3`로 선택한다\r\n\r\n   ![](images/20250106_135703.png)\r\n3. 생성할 S3의 정보를 입력한다 (Bucket에 입력한 이름으로 S3 Bucket이 생성된다)\r\n\r\n   ![](images/20250106_135744.png)\r\n4. 마지막으로 AWS Console에서 발급받았던 Access Key, Secret Access Key를 입력해준다\r\n\r\n   ![](images/20250106_135814.png)\r\n5. 아래와 같이 생성되었다면 성공\r\n\r\n   ![](images/20250106_135853.png)\r\n\r\n#### ***S3 Bucket 확인***\r\n넥서스 관리 페이지에서 입력한 이름의 S3 Bucket이 생성된걸 확인 할 수 있다\r\n\r\n   ![](images/20250106_140015.png)\r\n\r\n## 👋\r\nEC2에 마운트되는 SSD등의 스토리지보다 S3가 가격적인 측면에서 큰 차이로 저렴하기 때문에\r\n서버의 용량 증설을 고려할때 S3도 함께 생각해보면 좋을 것 같다\r\n"},{"excerpt":"☀️ 테스트 환경 Amazon Linux 2023 (EC2) OpenJDK 17.0.2 Nexus 3.75.1-01 ✋ 넥서스란? Nexus는 Sonartype에서 만든 Repository Manager 솔루션이다. Node 기반의 Package나 Gradle, Maven 기반의 Library 등 다양한 Format의 저장소를 지원한다. 🚀 Nexus 다운…","fields":{"slug":"/amazon-linux-nexus-install/"},"frontmatter":{"date":"January 20, 2025","title":"Amazon Linux에 Nexus 설치하기","tags":["aws","ec2","amazon-linux","linux","nexus"],"emoji":"🔗","series":null},"rawMarkdownBody":"\r\n\r\n## ☀️ 테스트 환경\r\n> - Amazon Linux 2023 (EC2)\r\n> - OpenJDK 17.0.2\r\n> - Nexus 3.75.1-01\r\n\r\n## ✋ 넥서스란?\r\nNexus는 Sonartype에서 만든 Repository Manager 솔루션이다. Node 기반의 Package나 Gradle, Maven 기반의 Library 등 다양한 Format의 저장소를 지원한다.\r\n\r\n## 🚀 Nexus 다운로드 및 설치\r\n\r\n> ☑️ JRE 환경에서 구동되기 때문에 JRE 혹은 JRE가 포함된 JDK의 설치가 필수적이다.\r\n\r\n\r\n[Nexus 다운로드↗](https://help.sonatype.com/en/download-archives---repository-manager-3.html)에서 원하는 버전을 다운로드하거나 링크를 복사해둔다.\r\n\r\n#### ***다운로드***\r\n원하는 위치에 다운로드한 파일을 업로드하거나 wget을 이용해서 다운로드 한다.\r\n```shell\r\ncd /nexus\r\nsudo wget https://download.sonatype.com/nexus/3/nexus-3.75.1-01-unix.tar.gz\r\n```\r\n\r\n#### ***압축풀기***\r\n```shell\r\nsudo tar zxvf nexus-3.75.1-01-unix.tar.gz\r\n```\r\n\r\n#### ***계정 생성***\r\n- 넥서스를 기동할 계정을 생성하고 위에서 압축해제된 폴더 2개의 소유권을 변경한다.\r\n    ```shell\r\n    sudo adduser nexus\r\n    sudo chown -R nexus:nexus /nexus/nexus-3.75.1-01\r\n    sudo chown -R nexus:nexus /nexus/sonatype-work\r\n    ```\r\n\r\n- nexus.rc 수정\r\n    ```shell\r\n    sudo vi /nexus/nexus-3.75.1-01/bin/nexus.rc\r\n    ```\r\n    ```vim\r\n    run_as_user=\"nexus\"\r\n    ```\r\n\r\n- ***서비스 등록***\r\n    ```shell\r\n    sudo vi /etc/systemd/system/nexus.service\r\n    ```\r\n    ```vim\r\n    [Unit]\r\n    Description=nexus service\r\n    After=network.target\r\n    \r\n    [Service]\r\n    Type=forking\r\n    LimitNOFILE=65536\r\n    User=nexus\r\n    Group=nexus\r\n    ExecStart=/nexus/nexus-3.75.1-01/bin/nexus start\r\n    ExecStop=/nexus/nexus-3.75.1-01/bin/nexus stop\r\n    User=nexus\r\n    Restart=on-abort\r\n    \r\n    [Install]\r\n    WantedBy=multi-user.target\r\n    ```\r\n    ```shell\r\n    sudo systemctl enable nexus\r\n    ```\r\n\r\n## 💿 실행\r\n\r\n#### ***서비스 시작***\r\n```shell\r\nsudo systemctl start nexus\r\n```\r\n\r\n#### ***Admin 초기 패스워드 확인***\r\n```shell\r\ncat /nexus/sonatype-work/nexus3/admin.password\r\n```\r\n```shell\r\n✔\r\nXXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\r\n```\r\n\r\n## 💡 기타\r\n마지막으로 Nexus가 실행되는 포트를 변경하고 싶다면 아래와 같이 수정하면 된다. (기본 포트는 8081)\r\n```shell\r\nsudo vi /nexus/nexus-3.75.1-01/etc/nexus-default.properties\r\n```\r\n```vim\r\n...\r\napplication-port=9000\r\n...\r\n```\r\n\r\n## 👋\r\n\r\n"},{"excerpt":"☀️ 테스트 환경 AWS Console ✋ 들어가며 파일 업로드/다운로드 기능을 구현할때 지금도 많은 서비스들이 백엔드 프로세스에서 파일을 읽은 후 업로드하거나 다운로드하는 방식을 사용하고 있다.\nObject Storage에 하나인 Amazon S3에 Presigned URL을 통해서 파일을 업로드/다운로드하기 위해서 이 글에서는 Amazon EC2에 S3…","fields":{"slug":"/amazon-ec2-s3-bucket-link/"},"frontmatter":{"date":"January 20, 2025","title":"Amazon EC2에 S3 Bucket 연결 (AWS Console)","tags":["aws","ec2","s3"],"emoji":"🔗","series":"📂 AWS S3 Presigned URL"},"rawMarkdownBody":"\r\n## ☀️ 테스트 환경\r\n> - AWS Console\r\n\r\n## ✋ 들어가며\r\n\r\n파일 업로드/다운로드 기능을 구현할때 지금도 많은 서비스들이 백엔드 프로세스에서 파일을 읽은 후 업로드하거나 다운로드하는 방식을 사용하고 있다.\r\nObject Storage에 하나인 Amazon S3에 Presigned URL을 통해서 파일을 업로드/다운로드하기 위해서 이 글에서는 Amazon EC2에 S3 Bucket 접근 권한을 주는 일련의 과정을 설명하려고 한다.\r\n\r\n## ❓ Amazon S3(Object Storage)를 선택한 이유\r\n\r\n1. 일반적인 File Storage에 비해서 Object Storage를 사용하면 매우 높은 확장성이 보장되며 사용한 만큼만 비용을 지불하기 때문에 초기 비용이 낮다.\r\n2. Amazon S3에 특정 시간동안만 유효한 Presigned URL을 사용해서 파일에 접근하면 불필요한 접근을 방지할 수 있다.\r\n3. 데이터 분산 저장으로 저장 데이터 손실에 대한 부담이 매우 낮다.\r\n\r\n#### ***Object Storage란?***\r\n> 오브젝트 스토리지(object storage) 또는 오브젝트 기반 스토리지(object-based storage)는 섹터와 트랙 내에 데이터를 블록으로 관리하는 블록 스토리지, 파일 계층으로서 데이터를 관리하는 파일 시스템과 같은 다른 스토리지 구조와는 반대로 데이터를 오브젝트로 관리하는 기억 장치이다. 각 스토리지는 여러 레벨로 구현될 수 있는데, 여기에는 장치 레벨, 시스템 레벨, 인터페이스 레벨이 있다. 각 케이스에서 오브젝트 스토리지는 다른 스토리지 구조에 의해 언급되지 않는 기능들을 가능케 하려고 노력하는데, 애플리케이션에 의해 직접 프로그래밍 가능한 인터페이스라든지, 물리 하드웨어의 여러 인스턴스를 검색할 수 있는 이름공간이라든지, 데이터 레플리케이션과 같은 데이터 관리 기능이라든지, 오브젝트 레벨의 입도의 데이터 분산을 들 수 있다.\r\n> <br/><br/>\r\n> 출처 : [위키백과↗](https://ko.wikipedia.org/wiki/오브젝트_스토리지)\r\n\r\n#### ***Object Storage VS File Storage***\r\n\r\n| 특성  | Object Storage (S3)          | File Storage                      |\r\n|-----|------------------------------|-----------------------------------|\r\n| 구조  | 데이터가 객체로 저장되며, 메타데이터와 함께 관리됨 | 파일 시스템 구조로, 폴더와 파일로 구성됨           |\r\n| 확장성 | 매우 높은 확장성, 수 페타바이트 이상 저장 가능  | 제한된 확장성, 하드웨어에 따라 다름              |\r\n| 성능  | 객체 접근 시 지연이 있을 수 있음          | 빠른 접근 속도, 동시 사용량에 따라 서버 부하 가능성 있음 |\r\n| 내구성 | 높은 내구성, 데이터 복제 및 분산 저장 가능    | 하드웨어 고장 시 데이터 손실 위험이 있음           |\r\n| 비용  | 사용한 만큼 지불하는 구조로 초기 비용이 낮음    | 초기 투자 비용이 높을 수 있으며, 유지 관리 비용 발생   |\r\n\r\n\r\n## 🛠 AWS Console 설정\r\nPresigned URL로 파일을 업로드/다운로드하기 위해서는 S3 Bucket은 물론이고 필요에 따라 IAM 정책 및 역할 설정을 해야한다.\r\n\r\n#### ***S3 Bucket 생성***\r\n먼저 가장 중요한 S3 Bucket을 생성해주자.\r\n\r\n1. *Amazon S3 ➡ 버킷 만들기*\r\n\r\n   ![](images/20250113_163718.png)\r\n\r\n2. 파일에 대한 접근은 Presigned URL을 통해서만 이루어질 예정이기 때문에 퍼블릭 엑세스를 차단했다.\r\n\r\n   ![](images/20250113_163853.png)\r\n3. CORS 에러를 방지하기 위해서 접근 가능한 프론트 도메인을 설정했다.\r\n\r\n   ![](images/20250115_083503.png)\r\n\r\n#### ***IAM 정책 설정***\r\nS3에 파일을 업로드/다운로드할 수 있는 권한 정책을 생성한다.\r\n\r\n1. *IAM ➡ 정책 ➡ 정책 생성*\r\n\r\n   ![](images/20250113_164009.png)\r\n\r\n2. S3 선택 후 GetObject, GetObjectAcl, PutObject, PutObjectAcl 작업을 허용해준다. (*Acl을 허용하지 않으면 403 에러 발생)\r\n\r\n   ![](images/20250113_164352.png)\r\n\r\n3. 앞에서 생성한 S3 Bucket 명을 입력하고 모든 하위 Object에 접근 가능하도록 `*` 입력한다.\r\n\r\n   ![](images/20250113_164455.png)\r\n4. 마지막으로 정책 이름을 설정한다.\r\n\r\n   ![](images/20250113_164643.png)\r\n\r\n#### ***IAM 역할 설정***\r\n이 단계에서는 위에서 생성한 정책을 EC2 역할로 설정한다.  \r\n\r\n1. *IAM ➡ 역할 ➡ 역할 생성*\r\n\r\n   ![](images/20250113_164740.png)\r\n\r\n2. 엔티티 유형을 AWS 서비스로 선택하고 사용 사례를 EC2로 선택\r\n\r\n   ![](images/20250113_164829.png)\r\n\r\n3. 위에서 생성한 정책 선택\r\n\r\n   ![](images/20250113_164919.png)\r\n\r\n4. 역할의 이름을 설정한다.\r\n\r\n   ![](images/20250113_165138.png)\r\n\r\n5. *EC2 인스턴스 ➡ 작업 ➡ 보안 ➡ IAM 역할 수정*\r\n\r\n   ![](images/20250113_165350.png)\r\n\r\n6. 위에서 생성한 역할을 선택하면 끝\r\n\r\n   ![](images/20250113_165452.png)\r\n\r\n\r\n## 👋\r\n다음 글에서는 백엔드(Spring Boot)에서 실제로 어떻게 Presigned URL을 생성하고 프론트(React)에서 파일에 접근하는지를 알아봐야겠다.\r\n"},{"excerpt":"☀️ 테스트 환경 CentOS 8 WSL (Windows 10 Pro) ✋ 들어가며 로컬에서 개발된 소스를 리눅스 환경에 배포할때 메모리에 관련된 에러 메시지를 자주 만날 수 있다. JVM이나 node 환경에서는 Heap memory를 늘려주는 방법으로도 메모리 관련 에러로부터 자유로울 수 있지만, 물리 메모리가 절대적으로 부족한 상황이라면 디스크의 일부분…","fields":{"slug":"/linux-swap-memory/"},"frontmatter":{"date":"January 20, 2025","title":"리눅스 Swap memory 할당/해제","tags":["linux","swap-memory"],"emoji":"💿","series":null},"rawMarkdownBody":"\r\n## ☀️ 테스트 환경\r\n> - CentOS 8\r\n> - WSL (Windows 10 Pro)\r\n\r\n## ✋ 들어가며\r\n로컬에서 개발된 소스를 리눅스 환경에 배포할때 메모리에 관련된 에러 메시지를 자주 만날 수 있다. JVM이나 node 환경에서는 Heap memory를 늘려주는 방법으로도 메모리 관련 에러로부터 자유로울 수 있지만, 물리 메모리가 절대적으로 부족한 상황이라면 디스크의 일부분을 메모리처럼 활용할 수 있는 Swap memory 설정이 해결책이 될 수 있다.\r\n\r\n#### ***Swap Memory란?***\r\n메모리가 가든찬 경우에도 디스크의 일부분을 활용하여 메모리를 대체할 수 있도록 할당한 공간이다.\r\n\r\n#### ***Swap Memory의 권장 크기***\r\n[Red Hat Enterprise Linux 권장 Swap 크기↗](https://access.redhat.com/ko/solutions/744483)를 참고하면 Swap 공간을 얼마나 할당해서 사용해야 할지에 대한 답을 찾을 수 있지만 디스크의 일부분을 사용하기 때문에 여유 디스크의 사이즈도 고려해서 할당해야 한다.\r\n\r\n\r\n## ✅ Swap Memory 할당\r\n\r\n#### ***메모리 확인***\r\n할당 전 메모리를 확인해보면 Swap 영역이 '0B'로 잡혀있는 것을 확인 할 수 있다.\r\n```shell\r\nfree -h\r\n```\r\n```shell\r\n✔\r\n              total        used        free      shared  buff/cache   available\r\nMem:            15G          0B          0B          0B          0B          0B\r\nSwap:            0B          0B          0B\r\n```\r\n\r\n#### ***Swap File 생성 및 권한 설정***\r\n할당할 용량의 파일을 루트 경로에 생성하고 권한을 설정한다.\r\n```shell\r\nfallocate -l 8G /swapfile\r\nchmod 600 /swapfile\r\ncd /\r\nls -alh\r\n```\r\n```shell\r\n✔\r\ndr-xr-xr-x  22 root    root     314 Dec  5 04:53 .\r\ndr-xr-xr-x  22 root    root     314 Dec  5 04:53 ..\r\n-rw-------   1 root    root    8.0G Dec  5 05:45 swapfile\r\n```\r\n\r\n#### ***Swap 파티션 생성 및 활성화***\r\n\r\n1. 스왑 파티션 생성\r\n- 재기동 후에도 파티션이 유지되도록 설정하기 위해서 출력되는 UUID는 복사해둔다. \r\n    \r\n    ```shell\r\n    mkswap /swapfile\r\n    ```\r\n    ```shell\r\n    ✔\r\n    Setting up swapspace version 1, size = 8 GiB (8589934592 bytes)\r\n    no label, UUID=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\r\n    ```\r\n\r\n2. 스왑 영역 활성화 및 확인\r\n    ```shell\r\n    swapon /swapfile\r\n    free -h\r\n    ```\r\n    ```shell\r\n    ✔\r\n                  total        used        free      shared  buff/cache   available\r\n    Mem:            15G          0B          0B          0B          0B          0B\r\n    Swap:            8G          0B          0B\r\n    ```\r\n\r\n3. fstab에 파티션 추가\r\n   - 복사해두었던 UUID를 Tab 문자열이나 공백으로 구분해서 '/etc/fstab' 하단에 작성하면 재기동 후에도 유지된다.\r\n    ```shell\r\n    vi /etc/fstab\r\n    ```\r\n    ```shell\r\n    ✔\r\n    ...\r\n    UUID=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX swap swap defaults 0 0\r\n    ```\r\n\r\n\r\n## ❎ Swap Memory 해제\r\n\r\n#### ***Swap 영역 비활성화***\r\n스왑을 비활성화 해주고 생성했던 '/swapfile'을 삭제하면 다시 '0B'로 변한걸 확인할 수 있다.\r\n```shell\r\nswapoff /swapfile\r\nrm -rf /swapfile\r\nfree -h\r\n```\r\n```shell\r\n✔\r\n              total        used        free      shared  buff/cache   available\r\nMem:            15G          0B          0B          0B          0B          0B\r\nSwap:            0B          0B          0B\r\n```\r\n\r\n#### ***fstab 파티션 삭제***\r\n추가했던 UUID를 제거하면 Swap Memory 해제가 완료된다. \r\n```shell\r\nvi /etc/fstab\r\n```\r\n\r\n\r\n## 👋 마치며\r\nWindows 10 Pro 환경에서 WSL을 활성화하고 CentOS 8을 설치해봤는데 생각보다 안정적이지 못한 느낌이 든다. 연습장으로 사용할 다른 대안을 찾아봐야겠다.\r\n\r\n"},{"excerpt":"☀️ 테스트 환경 IntelliJ IDEA 2024.3 (Ultimate Edition) PostgreSQL 16.1 (Amazon Aurora) ✋ 들어가며 데이터베이스에 생성되어있는 테이블을 기반으로 VO(DTO)를 생성하고 매번 작성해야하는 Mybatis 기반의 쿼리를 자동으로 생성할 수 없을까? 고민하는 중에 인텔리제이와 약간의 Groovy 기반의 …","fields":{"slug":"/intellij-vo-mybatis-xml/"},"frontmatter":{"date":"January 19, 2025","title":"VO 및 Mybatis XML 자동 생성하기 (with. IntelliJ)","tags":["intellij"],"emoji":"🚘","series":null},"rawMarkdownBody":"\r\n## ☀️ 테스트 환경\r\n> - IntelliJ IDEA 2024.3 (Ultimate Edition)\r\n>\r\n> - PostgreSQL 16.1 (Amazon Aurora)\r\n\r\n## ✋ 들어가며\r\n데이터베이스에 생성되어있는 테이블을 기반으로 VO(DTO)를 생성하고 매번 작성해야하는 Mybatis 기반의 쿼리를 자동으로 생성할 수 없을까?\r\n\r\n고민하는 중에 인텔리제이와 약간의 Groovy 기반의 코딩을 이용하는 좋은 방법이 생겼다. 테스트 환경은 Ultimate Edition이지만 Community Edition도 가능하다.\r\n\r\n## 💾 Database 설정 및 연결\r\n\r\n#### ***Database ➡ <shortcut> + </shortcut> ➡ Data Source ➡ PostgreSQL*** \r\n- 테스트 환경은 PostgreSQL이지만 지원하는 Data Source라면 모두 사용 가능하다.\r\n\r\n   ![](images/20241205_100506.png)\r\n\r\n#### ***PostgreSQL 연결***\r\n1. PostgreSQL의 Host, User 등 접속 정보를 입력하고 OK 버튼을 클릭한다.\r\n\r\n   ![](images/20241205_101046.png)\r\n\r\n2. 연결되면 Database 탭에서 테이블 정보를 확인 할 수 있다.\r\n\r\n   ![](images/20241205_101236.png)\r\n\r\n## 📝 Groovy Script 작성\r\n\r\n#### ***스크립트 파일 생성***\r\n1. 데이터베이스 연결이 완료되면 Project 탭에서 아래와 같은 내용을 확인 할 수 있다.\r\n2. _Generate POJOs.groovy_ 파일을 복사해서 새로운 이름으로 만들어준다.\r\n\r\n   ![](images/20241205_101358.png)\r\n\r\n#### ***스크립트 수정***\r\n1. VO 파일에 _lombok_, _Swagger_ 등을 적용하기 위해서 기본 파일을 수정 했다.\r\n2. 그리고 Mybatis 기반의 XML 쿼리까지 생성해주길 원하기 때문에 해당 부분을 추가 작성. \r\n3. 소스 전문\r\n   ```groovy\r\n   import com.intellij.database.model.DasTable\r\n   import com.intellij.database.util.Case\r\n   import com.intellij.database.util.DasUtil\r\n   \r\n   /*\r\n    * Available context bindings:\r\n    *   SELECTION   Iterable<DasObject>\r\n    *   PROJECT     project\r\n    *   FILES       files helper\r\n    */\r\n   packageName = \"_packageName_;\"\r\n   typeMapping = [\r\n           (~/(?i)int/)                      : \"int\",\r\n           (~/(?i)float|double|decimal|real/): \"double\",\r\n           (~/(?i)datetime|timestamp/)       : \"String\",\r\n           (~/(?i)date/)                     : \"String\",\r\n           (~/(?i)time/)                     : \"String\",\r\n           (~/(?i)/)                         : \"String\"\r\n   ]\r\n   \r\n   FILES.chooseDirectoryAndSave(\"Choose directory\", \"Choose where to store generated files\") { dir ->\r\n       SELECTION.filter { it instanceof DasTable }.each { generateVo(it, dir) }\r\n       SELECTION.filter { it instanceof DasTable }.each { generateSql(it, dir) }\r\n   }\r\n   \r\n   def generateVo(table, dir) {\r\n       def className = javaName(table.getName(), true)\r\n       def fields = calcFields(table)\r\n       def folderName = \"${dir}/model\"\r\n       def folder = new File(folderName)\r\n       if (!folder.exists()) {\r\n           folder.mkdirs()\r\n       }\r\n       new File(folderName, className + \".java\").withPrintWriter { out -> generateVo(out, className, fields) }\r\n   }\r\n   \r\n   def generateSql(table, dir) {\r\n       def camelClassName = javaName(table.getName(), true)\r\n       def className = table.getName()\r\n       def fields = calcFields(table)\r\n       def folderName = \"${dir}/sql\"\r\n       def folder = new File(folderName)\r\n       if (!folder.exists()) {\r\n           folder.mkdirs()\r\n       }\r\n       new File(folder, className + \".xml\").withPrintWriter { out -> generateSql(out, camelClassName, className, fields) }\r\n   }\r\n   \r\n   def generateVo(out, className, fields) {\r\n       out.println \"package $packageName\"\r\n       out.println \"\"\r\n       out.println \"import lombok.*;\"\r\n       out.println \"import com.fasterxml.jackson.annotation.JsonInclude;\"\r\n       out.println \"import io.swagger.v3.oas.annotations.media.Schema;\"\r\n       out.println \"\"\r\n       out.println \"@AllArgsConstructor(access = AccessLevel.PRIVATE)\"\r\n       out.println \"@NoArgsConstructor\"\r\n       out.println \"@Data\"\r\n       out.println \"@Builder\"\r\n       out.println \"@JsonInclude(JsonInclude.Include.NON_NULL)\"\r\n       out.println \"public class $className {\"\r\n       out.println \"\"\r\n       fields.each() {\r\n           if (it.annos != \"\") out.println \"  ${it.annos}\"\r\n           out.println \"\\t@Schema(description = \\\"${it.comment}\\\", example = \\\"${it.comment}\\\")\"\r\n           out.println \"\\tprivate ${it.type} ${it.camelName};\"\r\n           out.println \"\"\r\n       }\r\n       out.println \"}\"\r\n   }\r\n   \r\n   def generateSql(out, camelClassName, className, fields) {\r\n       out.println '<?xml version=\"1.0\" encoding=\"UTF-8\"?>'\r\n       out.println '<!DOCTYPE mapper'\r\n       out.println '\\t\\tPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"'\r\n       out.println '\\t\\t\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">'\r\n       out.println \"<mapper namespace=\\\"_namespace_\\\">\"\r\n   \r\n       out.println \"\"\r\n       out.println \"\\t<select id=\\\"select${camelClassName}\\\" parameterType=\\\"\\\" resultType=\\\"\\\">\"\r\n       out.println \"\\t\\t/* Query ID : _namespace_.select${camelClassName} */\"\r\n       out.println \"\\t\\tSELECT \"\r\n       def index = 0;\r\n   \r\n       fields.each() {\r\n           if (index != 0) {\r\n               out.println \"\\t\\t\\t,${Case.UPPER.apply(it.name)}\"\r\n           } else {\r\n               index = 1;\r\n               out.println \"\\t\\t\\t${Case.UPPER.apply(it.name)}\"\r\n           }\r\n       }\r\n       out.println \"\\t\\tFROM ${Case.UPPER.apply(className)}\"\r\n       out.println \"\\t\\tWHERE 1=1\"\r\n       out.println \"\\t</select>\"\r\n   \r\n   \r\n       out.println \"\"\r\n       out.println \"\\t<insert id=\\\"insert${camelClassName}\\\" parameterType=\\\"\\\">\"\r\n       out.println \"\\t\\t/* Query ID : _namespace_.insert${camelClassName} */\"\r\n       out.println \"\\t\\tINSERT INTO ${Case.UPPER.apply(className)} (\"\r\n       index = 0;\r\n       fields.each() {\r\n           if (index != 0) {\r\n               out.println \"\\t\\t\\t,${Case.UPPER.apply(it.name)}\"\r\n           } else {\r\n               index = 1;\r\n               out.println \"\\t\\t\\t${Case.UPPER.apply(it.name)}\"\r\n           }\r\n       }\r\n       out.println \"\\t\\t) VALUES (\"\r\n       index = 0;\r\n       fields.each() {\r\n           if (index != 0) {\r\n               out.println \"\\t\\t\\t,#{${it.camelName}}\"\r\n           } else {\r\n               index = 1;\r\n               out.println \"\\t\\t\\t#{${it.camelName}}\"\r\n           }\r\n       }\r\n       out.println \"\\t\\t)\"\r\n       out.println \"\\t</insert>\"\r\n   \r\n       out.println \"\"\r\n       out.println \"\\t<update id=\\\"update${camelClassName}\\\" parameterType=\\\"\\\">\"\r\n       out.println \"\\t\\t/* Query ID : _namespace_.update${camelClassName} */\"\r\n       out.println \"\\t\\tUPDATE ${Case.UPPER.apply(className)} SET \"\r\n       index = 0;\r\n   \r\n       fields.each() {\r\n           if (index != 0) {\r\n               out.println \"\\t\\t\\t,${Case.UPPER.apply(it.name)} = #{${it.camelName}}\"\r\n           } else {\r\n               index = 1;\r\n               out.println \"\\t\\t\\t${Case.UPPER.apply(it.name)} = #{${it.camelName}}\"\r\n           }\r\n       }\r\n       out.println \"\\t\\tWHERE 1=1\"\r\n       out.println \"\\t</update>\"\r\n   \r\n   \r\n       out.println '</mapper>'\r\n   }\r\n   \r\n   def calcFields(table) {\r\n       DasUtil.getColumns(table).reduce([]) { fields, col ->\r\n           def spec = Case.LOWER.apply(col.getDasType().getSpecification())\r\n           def typeStr = typeMapping.find { p, t -> p.matcher(spec).find() }.value\r\n           fields += [[\r\n                              camelName: javaName(col.getName(), false),\r\n                              name     : col.getName(),\r\n                              type     : typeStr,\r\n                              comment  : col.getComment(),\r\n                              annos    : \"\"]]\r\n       }\r\n   }\r\n   \r\n   def javaName(str, capitalize) {\r\n       def s = com.intellij.psi.codeStyle.NameUtil.splitNameIntoWords(str)\r\n               .collect { Case.LOWER.apply(it).capitalize() }\r\n               .join(\"\")\r\n               .replaceAll(/[^\\p{javaJavaIdentifierPart}[_]]/, \"_\")\r\n       capitalize || s.length() == 1 ? s : Case.LOWER.apply(s[0]) + s[1..-1]\r\n   }\r\n   ```\r\n\r\n## 💿 실행 및 결과\r\n\r\n#### ***실행*** \r\n1. *Database ➡ tables ➡ Tools ➡ Scripted Extensions ➡ 생성한 Groovy 파일*\r\n2. 저장할 위치 선택\r\n\r\n   ![](images/20241205_101601.png)\r\n\r\n#### ***결과***\r\n1. 선택된 위치에 model, sql 폴더가 각각 생성된다.\r\n\r\n   ![](images/20241205_101701.png)\r\n\r\n2. 생성된 파일 예시\r\n   - VO (TbSample.java)\r\n     ```java\r\n         package _packageName_;\r\n        \r\n         import lombok.*;\r\n         import com.fasterxml.jackson.annotation.JsonInclude;\r\n         import io.swagger.v3.oas.annotations.media.Schema;\r\n        \r\n         @AllArgsConstructor(access = AccessLevel.PRIVATE)\r\n         @NoArgsConstructor\r\n         @Data\r\n         @Builder\r\n         @JsonInclude(JsonInclude.Include.NON_NULL)\r\n         public class TbSample {\r\n        \r\n             @Schema(description = \"Column 1\", example = \"Column 1\")\r\n             private String colOne;\r\n        \r\n             @Schema(description = \"Column 2\", example = \"Column 2\")\r\n             private String colTwo;\r\n        \r\n             @Schema(description = \"Column 3\", example = \"Column 3\")\r\n             private String colThree;\r\n         }   \r\n     ```\r\n   - Mybatis XML Mapper (tb_sample.xml)\r\n     ```xml\r\n     <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n     <!DOCTYPE mapper\r\n            PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\r\n            \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\r\n     <mapper namespace=\"_namespace_\">\r\n    \r\n        <select id=\"selectTbSample\" parameterType=\"\" resultType=\"\">\r\n            /* Query ID : _namespace_.selectTbSample */\r\n            SELECT \r\n                COL_ONE\r\n                ,COL_TWO\r\n                ,COL_THREE\r\n            FROM TB_SAMPLE\r\n            WHERE 1=1\r\n        </select>\r\n    \r\n        <insert id=\"insertTbSample\" parameterType=\"\">\r\n            /* Query ID : _namespace_.insertTbSample */\r\n            INSERT INTO TB_SAMPLE (\r\n                COL_ONE\r\n                ,COL_TWO\r\n                ,COL_THREE\r\n            ) VALUES (\r\n                #{colOne}\r\n                ,#{colTwo}\r\n                ,#{colThree}\r\n            )\r\n        </insert>\r\n    \r\n        <update id=\"updateTbSample\" parameterType=\"\">\r\n            /* Query ID : _namespace_.updateTbSample */\r\n            UPDATE TB_SAMPLE SET \r\n                COL_ONE = #{colOne}\r\n                ,COL_TWO = #{colTwo}\r\n                ,COL_THREE = #{colThree}\r\n            WHERE 1=1\r\n        </update>\r\n     </mapper>\r\n     ```\r\n   \r\n## 👋 마치며\r\n역시 _Jetbrains_ 은 최고.. _IntelliJ_ 를 사용하지 않을 수 없다. (~~학생계정으로 써서 미안~~)\r\n\r\n"},{"excerpt":"안내 ⚠️ 현재 'Writerside'를 사용하지 않고 있습니다. ☀️ 사전 준비 ttf 확장자를 가진 폰트 파일 (현재 페이지에서는 네이버에서 만든 D2Coding↗을 사용) ✏️ StyleSheet 디렉토리 생성 Writerside/cfg/static 경로에 준비한 글꼴 파일을 옮기고 CSS 파일을 생성한다.  CSS 작성 font-face를 설정하고 모든…","fields":{"slug":"/writerside-font-change-d2coding/"},"frontmatter":{"date":"January 10, 2025","title":"Writerside Font 변경하기 (feat. D2Coding)","tags":["github-pages","blog","writerside"],"emoji":"💬","series":"📝 나만의 블로그를 운영하며"},"rawMarkdownBody":"\r\n## 안내\r\n> ⚠️ 현재 'Writerside'를 사용하지 않고 있습니다.\r\n\r\n\r\n## ☀️ ***사전 준비***\r\n> ttf 확장자를 가진 폰트 파일 (현재 페이지에서는 네이버에서 만든 [D2Coding↗](https://github.com/naver/d2codingfont)을 사용)\r\n\r\n## ✏️ StyleSheet\r\n\r\n#### ***디렉토리 생성***\r\n- _Writerside/cfg/static_ 경로에 준비한 글꼴 파일을 옮기고 CSS 파일을 생성한다.\r\n\r\n   ![](images/20241209_132048.png)\r\n\r\n#### ***CSS 작성***\r\n- font-face를 설정하고 모든 elements 영역의 글꼴을 d2coding으로 설정.\r\n  ```css\r\n  @font-face {\r\n      font-family: d2coding;\r\n      src: url('D2Coding-Ver1.3.2-20180524.ttf');\r\n  }\r\n  * {\r\n      font-family: d2coding !important;\r\n  }\r\n  ```\r\n\r\n## 🛠️ Writerside buildprofiles 설정\r\n\r\n#### ***Writerside/cfg/buildprofiles.xml***\r\n- *buildprofiles ➡ variables ➡ custom-css* 영역에 생성한 CSS 파일명을 입력한다.\r\n  ```xml\r\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n  <buildprofiles xsi:noNamespaceSchemaLocation=\"https://resources.jetbrains.com/writerside/1.0/build-profiles.xsd\"\r\n                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n      <variables>\r\n          <custom-css>custom.css</custom-css>\r\n      </variables>\r\n      <build-profile instance=\"in\">\r\n          <variables>\r\n              <noindex-content>false</noindex-content>\r\n          </variables>\r\n      </build-profile>\r\n      <footer>\r\n          <link href=\"https://github.com/rundevelrun\">GitHub</link>\r\n          <copyright>2024. RUN:DEVEL:RUN All Rights Reserved.</copyright>\r\n      </footer>\r\n      <sitemap priority=\"0.35\" change-frequency=\"daily\"/>\r\n  </buildprofiles>\r\n  ```\r\n\r\n## 👋 마치며\r\nD2Coding을 사용하면 개발을 하면서 구분하지 못하는 문자가 없어져서 좋은데 개발 블로그를 운영할때도 좋은 것 같다.\r\n\r\n"},{"excerpt":"안내 ⚠️ 현재 'Writerside'를 사용하지 않고 있습니다. ☀️ 사전 준비 Github Page 생성 (Github Pages 시작하기↗) Writerside↗ 문서 작성자를 위해, 문서 작성자가 만들었다는 Jetbrains의 문서 작성 도구 필자는 Jetbrains의 신봉자로서 Writerside를 이용해서 현재 페이지를 운영중이다. 📝 Github…","fields":{"slug":"/writerside-deploy-on-github/"},"frontmatter":{"date":"January 10, 2025","title":"Writerside Github에 배포하기","tags":["github-pages","blog","writerside"],"emoji":"🛫","series":"📝 나만의 블로그를 운영하며"},"rawMarkdownBody":"\r\n## 안내\r\n> ⚠️ 현재 'Writerside'를 사용하지 않고 있습니다.\r\n\r\n## ☀️ ***사전 준비***\r\n> 1. Github Page 생성 ([Github Pages 시작하기↗](https://6developer.com/github-pages-start.html))\r\n> 2. [Writerside↗](https://www.jetbrains.com/ko-kr/writerside/)\r\n>  - 문서 작성자를 위해, 문서 작성자가 만들었다는 Jetbrains의 문서 작성 도구\r\n>  - 필자는 Jetbrains의 신봉자로서 Writerside를 이용해서 현재 페이지를 운영중이다.\r\n>  - \r\n\r\n## 📝 Github Actions Workflows 작성\r\nGithub Pages에 정적 페이지를 빌드 후 배포하기 위해서는 Jenkins의 Pipeline과 같은 역할을 하는 Github Actions을 사용한다.\r\n\r\n#### ***Workflows 파일 생성***\r\n- _.github/workflows_ 아래 _build-docs.yml_ 파일을 생성한다.\r\n\r\n   ![](images/20241205_163053.png)\r\n\r\n#### ***Workflows 작성***\r\n- [공식 문서↗](https://www.jetbrains.com/help/writerside/deploy-docs-to-github-pages.html#build)를 보고 필요한 부분을 추리고 수정해서 아래와 같은 소스를 완성 했다.\r\n- Job은 간단하게 Build, Deploy로 구성했다.\r\n    ```yaml\r\n    name: Build documentation\r\n    \r\n    on:\r\n      push:\r\n        branches: [ \"main\" ]\r\n      workflow_dispatch:\r\n    \r\n    permissions:\r\n      id-token: write\r\n      pages: write\r\n    \r\n    env:\r\n      INSTANCE: 'Writerside/in'\r\n      ARTIFACT: 'webHelpIN2-all.zip'\r\n      DOCKER_VERSION: '241.15989'\r\n    \r\n    jobs:\r\n      build:\r\n        runs-on: ubuntu-latest\r\n        steps:\r\n          - name: Checkout repository\r\n            uses: actions/checkout@v4\r\n            with:\r\n              fetch-depth: 0\r\n    \r\n          - name: Build docs using Writerside Docker builder\r\n            uses: JetBrains/writerside-github-action@v4\r\n            with:\r\n              instance: ${{ env.INSTANCE }}\r\n              artifact: ${{ env.ARTIFACT }}\r\n              docker-version: ${{ env.DOCKER_VERSION }}\r\n    \r\n          - name: Save artifact with build results\r\n            uses: actions/upload-artifact@v4\r\n            with:\r\n              name: docs\r\n              path: |\r\n                artifacts/${{ env.ARTIFACT }}\r\n                artifacts/report.json\r\n              retention-days: 7\r\n      deploy:\r\n        environment:\r\n          name: github-pages\r\n          url: ${{ steps.deployment.outputs.page_url }}\r\n        needs: [ build ]\r\n        runs-on: ubuntu-latest\r\n        steps:\r\n          - name: Download artifacts\r\n            uses: actions/download-artifact@v4\r\n            with:\r\n              name: docs\r\n    \r\n          - name: Unzip artifact\r\n            run: unzip -O UTF-8 -qq '${{ env.ARTIFACT }}' -d dir\r\n    \r\n          - name: Setup Pages\r\n            uses: actions/configure-pages@v4\r\n    \r\n          - name: Package and upload Pages artifact\r\n            uses: actions/upload-pages-artifact@v3\r\n            with:\r\n              path: dir\r\n    \r\n          - name: Deploy to GitHub Pages\r\n            id: deployment\r\n            uses: actions/deploy-pages@v4\r\n    ```\r\n\r\n## 🚀 빌드 및 배포\r\n\r\n#### ***배포 대상 브랜치 병합***\r\n- 위 소스를 그대로 사용하면 'main' branch에 변화(push or merge)가 생기면 빌드 및 배포가 실행된다.\r\n- 대상 브랜치를 변경하고 싶으면 소스의 아래 부분을 수정한다.\r\n```yaml\r\n...\r\non:\r\n  push:\r\n    branches: [ \"main\" ]  # 대상 브랜치 \r\n  workflow_dispatch:\r\n...\r\n```\r\n\r\n#### ***확인***\r\n- *Actions ➡ Build Number*\r\n- Github Page를 운영중인 Repository에서 배포 상태를 확인 할 수 있다.\r\n\r\n   ![](images/20241205_165648.png)\r\n\r\n## 👋 마치며\r\n지금 보고 있는 이 사이트의 모든 소스는 [여기↗](https://github.com/rundevelrun/rundevelrun.github.io)에서 확인이 가능하다.\r\n\r\n"},{"excerpt":"🔈 도메인 준비 ☀️ 당연한 말씀\n\nGithub Pages에 사용자 정의 도메인을 설정하려면 개인 도메인이 준비되어있어야 한다.\n(개인 도메인은 가비아, 후이즈 등 각종 호스팅 사이트에서 구매가능하며 원하는 사이트를 통해서 구매) 💎 DNS 레코드 설정 사용 가능한 DNS 레코드의 종류는 여기↗에서 확인이 가능하며 필자의 경우 A 레코드를 사용했다. A 레…","fields":{"slug":"/github-pages-personal-domain/"},"frontmatter":{"date":"January 10, 2025","title":"Github Pages 사용자 정의 도메인 설정","tags":["github-pages","blog","domain"],"emoji":"🚀","series":"📝 나만의 블로그를 운영하며"},"rawMarkdownBody":"\r\n## 🔈 도메인 준비\r\n\r\n> ☀️ ***당연한 말씀***\r\n> <br/><br/>\r\n> Github Pages에 사용자 정의 도메인을 설정하려면 개인 도메인이 준비되어있어야 한다.\r\n> (개인 도메인은 가비아, 후이즈 등 각종 호스팅 사이트에서 구매가능하며 원하는 사이트를 통해서 구매)\r\n\r\n## 💎 DNS 레코드 설정\r\n사용 가능한 DNS 레코드의 종류는 [여기↗](https://docs.github.com/ko/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#dns-records-for-your-custom-domain)에서 확인이 가능하며 필자의 경우 A 레코드를 사용했다.\r\n\r\n#### ***A 레코드 추가***\r\n1. 호스팅 사이트마다 사용하는 방식은 다를 수 있지만 아래와 같이 4종류의 레코드를 등록한다.\r\n2. 필자는 A 레코드를 사용했지만 기호에 맞게 등록하기로 한다.\r\n\r\n   ![](images/20241125_083158.png)\r\n\r\n## 🍨 Github 도메인 등록\r\nGithub Pages를 운영중인 Repository에 도메인을 등록한다.\r\n\r\n#### ***도메인 등록***\r\n*Settings ➡ Pages ➡ Custom domain*\r\n- DNS 레코드 설정을 마친 도메인을 입력한다.\r\n\r\n    ![](images/20241125_082905.png)\r\n\r\n#### ***Enforce HTTPS 설정***\r\n1. 도메인 등록이 완료되면 **약 15분 후** 체크박스가 활성화 된다.\r\n2. 항상 https로 접속하기 위해서 **Enforce HTTPS**에 꼭 체크해주자.\r\n\r\n   ![](images/20241125_083307.png)\r\n\r\n#### ***접속 확인***\r\n1. 등록한 도메인으로 접속하면 ~~*.github.io~~ 대신 도메인으로 접속이 되는걸 확인할 수 있다.\r\n2. ~~*.github.io~~ 접속시 등록한 도메인으로 redirect 된다.\r\n\r\n   ![](images/20241125_134247.png)\r\n\r\n## 👋 마치며\r\nJetbrains 신봉자인 내 눈 앞에 나타난 [Writerside↗](https://www.jetbrains.com/ko-kr/writerside/)로 기술블로그를 시작했다.\r\n티스토리, 네이버 블로그, 벨로그를 거쳐서 Jekyll 테마를 활용한 Github Pages까지 운영을 해봤지만 드디어 똥손이 운영하기에 가장 적합한 도구를 찾은 것 같다.\r\n"},{"excerpt":"🔈 Github 계정 준비 ☀️ 당연한 말씀\n\nGithub page를 이용해서 개인 홈페이지나 블로그를 운영하기 위해서는\nGithub↗에 가입된 계정이 있어야 한다. 💎 Repository 생성 자신의 깃허브 계정에서 개인 사이트를 운영할 레파지토리를 생성한다. 생성 메뉴 접속 Profile ➡ Your repositories ➡ New  정보 입력 및 생…","fields":{"slug":"/github-pages-start/"},"frontmatter":{"date":"January 10, 2025","title":"Github Pages 시작하기","tags":["github-pages","blog"],"emoji":"👋","series":"📝 나만의 블로그를 운영하며"},"rawMarkdownBody":"\r\n\r\n## 🔈 Github 계정 준비\r\n\r\n> ☀️ ***당연한 말씀***\r\n> <br/><br/>\r\n> Github page를 이용해서 개인 홈페이지나 블로그를 운영하기 위해서는\r\n> [Github↗](https://github.com/)에 가입된 계정이 있어야 한다.\r\n\r\n## 💎 Repository 생성\r\n자신의 깃허브 계정에서 개인 사이트를 운영할 레파지토리를 생성한다.\r\n\r\n#### ***생성 메뉴 접속***\r\n*Profile ➡ Your repositories ➡ New*\r\n\r\n![](images/20241127_172942.png)\r\n\r\n#### ***정보 입력 및 생성***\r\n1. Repository name\r\n    - <shortcut>계정ID.github.io</shortcut> 입력시 `https://계정ID.github.io`로 접속\r\n    - 그 외 <shortcut>xxxxx</shortcut> 입력시 [사용자 정의 도메인 설정](https://6developer.com/github-pages-personal-domain.html) 필요\r\n2. Add a README file 체크\r\n   - *README.md*의 내용이 초기 화면으로 표시\r\n   \r\n      ![](images/20241127_164354.png)\r\n\r\n#### ***빌드 및 배포 설정***\r\n*Settings ➡ Pages*\r\n1. *Build and deployment*의 설정을 `GitHub Actions`로 변경\r\n2. 보고 있는 페이지는 *GitHub Action*을 이용해서 빌드와 배포가 이루어지는데 해당 내용을 포스팅 할 예정\r\n\r\n![](images/20241128_083031.png)\r\n\r\n#### ***접속 확인***\r\n*Settings ➡ Pages*\r\n1. 자신의 접속 도메인은 설정 페이지에서 확인하고 접속할 수 있다.\r\n2. `https://계정ID.github.io` 혹은 사용자 정의 도메인으로 접속\r\n\r\n![](images/20241128_083702.png)\r\n\r\n## 👋 마치며\r\nWriterside를 이용해서 포스팅을 이어가고 있는데 아직 카테고리 구성이나 상위메뉴, 메인페이지 등을 어떻게 구성할지 감이 안잡힌다.\r\n하나씩 보완해가면서 구성해야겠다.\r\n\r\n"}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}