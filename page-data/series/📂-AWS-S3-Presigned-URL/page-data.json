{"componentChunkName":"component---src-templates-series-jsx","path":"/series/📂-AWS-S3-Presigned-URL/","result":{"data":{"posts":{"nodes":[{"excerpt":"☀️ 테스트 환경 AWS Console ✋ 들어가며 파일 업로드/다운로드 기능을 구현할때 지금도 많은 서비스들이 백엔드 프로세스에서 파일을 읽은 후 업로드하거나 다운로드하는 방식을 사용하고 있다.\nObject Storage에 하나인 Amazon S3에 Presigned URL을 통해서 파일을 업로드/다운로드하기 위해서 이 글에서는 Amazon EC2에 S3…","fields":{"slug":"/amazon-ec2-s3-bucket-link/"},"frontmatter":{"date":"January 20, 2025","update":"Jan 20, 2025","title":"Amazon EC2에 S3 Bucket 연결 (AWS Console)","tags":["aws","ec2","s3"],"emoji":"🔗"}},{"excerpt":"☀️ 테스트 환경 OpenJDK 17.0.2   Gradle 8.0.2     Spring Boot 3.0.5 ✋ 들어가며 이번 포스팅 에서는 EC2에 올라간 SpringBoot 기반 웹어플리케이션에서 Presigned URL을 발급받는 과정을 작성해보려고 한다.\n현재 작성중인 Series의 첫번째 포스팅은 EC2에 S3 Bucket 접근 권한을 부여하는 …","fields":{"slug":"/presigned-url-s3-upload-springboot/"},"frontmatter":{"date":"January 21, 2025","update":"Jan 21, 2025","title":"SpringBoot에서 S3 Presigned URL 발급받기","tags":["aws","s3","presigned-url","springboot"],"emoji":"🔐"}},{"excerpt":"☀️ 테스트 환경 node v20.16.0 yarn 1.22.22 react ^18.2.0 ✋ 들어가며 지난 포스팅에서는 EC2에 올라간 SpringBoot 기반 웹어플리케이션에서 Presigned URL을 발급받는 과정을 알아보았다.\n이번에는 발급받은 Presigned URL을 사용해서 Client(React)에서 S3로 파일을 직접 업로드/다운로드 하는…","fields":{"slug":"/presigned-url-s3-upload-react/"},"frontmatter":{"date":"January 21, 2025","update":"Jan 21, 2025","title":"React에서 S3 Presigned URL을 이용한 파일 업로드/다운로드","tags":["aws","s3","presigned-url","react"],"emoji":"⬆️"}}]}},"pageContext":{"series":"📂 AWS S3 Presigned URL"}},"staticQueryHashes":[],"slicesMap":{}}