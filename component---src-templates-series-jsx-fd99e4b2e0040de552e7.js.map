{"version":3,"file":"component---src-templates-series-jsx-fd99e4b2e0040de552e7.js","mappings":"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","sources":["webpack://gatsby-starter-rundevelrun/./src/components/PostList/index.jsx","webpack://gatsby-starter-rundevelrun/./src/components/TagList/index.jsx","webpack://gatsby-starter-rundevelrun/./src/templates/Series.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport styled from \"styled-components\"\nimport _ from \"lodash\"\n\nimport { Link } from \"gatsby\"\n\nimport Title from \"components/Title\"\nimport Divider from \"components/Divider\"\nimport TagList from \"components/TagList\"\nimport DisplayAds from \"../DisplayAd\"\n\nconst PostListWrapper = styled.div`\n  @media (max-width: 768px) {\n    padding: 0 10px;\n  }\n`\n\nconst PostWrapper = styled.div`\n  position: relative;\n  top: 0;\n  transition: all 0.5s;\n\n  @media (max-width: 768px) {\n    padding: 0 5px;\n  }\n`\n\nconst Date = styled.p`\n  margin-bottom: 16px;\n  font-size: 14.4px;\n  color: ${props => props.theme.colors.tertiaryText};\n`\nconst SeriesName = styled.p`\n  font-size: 14.4px;\n  float: right;\n  color: ${props => props.theme.colors.text};\n  text-decoration-line: underline;  \n`\n\nconst Excerpt = styled.p`\n  margin-bottom: 32px;\n  line-height: 1.7;\n  font-size: 15px;\n  color: ${props => props.theme.colors.secondaryText};\n  word-break: break-all;\n`\n\nconst EmojiWrapper = styled.div`\n  float:left;\n  margin-right: 15px;  \n`\n\nconst checkIsScrollAtBottom = () => {\n  return (\n    document.documentElement.scrollHeight -\n      document.documentElement.scrollTop <=\n    document.documentElement.clientHeight + 100\n  )\n}\n\nconst PostList = ({ postList }) => {\n  const [postCount, setPostCount] = useState(10)\n\n  const handleMoreLoad = _.throttle(() => {\n    if (checkIsScrollAtBottom() && postCount < postList.length) {\n      setTimeout(() => setPostCount(postCount + 10), 300)\n    }\n  }, 250)\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleMoreLoad)\n\n    return () => {\n      window.removeEventListener(\"scroll\", handleMoreLoad)\n    }\n  }, [postCount, postList])\n\n  useEffect(() => {\n    setPostCount(10)\n  }, [postList])\n\n  return (\n    <PostListWrapper>\n      {postList.slice(0, postCount).map((post, i) => {\n        const { title, date, tags, emoji, series } = post.frontmatter\n        const { excerpt } = post\n        const { slug } = post.fields\n        return (\n          <React.Fragment key={JSON.stringify({ slug, date })}>\n            <PostWrapper>\n              <Title size=\"bg\">\n                {emoji ? (\n                  <EmojiWrapper>{emoji}</EmojiWrapper>\n                ) : ''\n                }\n                <Link to={slug}>{title}</Link>\n              </Title>\n              <Link to={`/series/${_.replace(series, /\\s/g, \"-\")}`}>\n              <SeriesName>{series}</SeriesName>\n              </Link>\n              <Date>{date}</Date>\n              <Excerpt>{excerpt}</Excerpt>\n              <TagList tagList={tags} />\n            </PostWrapper>\n            {\n              (i == 0 || i==2) && (\n                <DisplayAds />\n              )\n            }\n            {postCount - 1 !== i && postList.length - 1 !== i && (\n              <Divider mt=\"48px\" mb=\"32px\" />\n            )}\n          </React.Fragment>\n        )\n      })}\n    </PostListWrapper>\n  )\n}\n\nexport default PostList\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport { Link } from \"gatsby\"\n\nconst TagListWrapper = styled.div`\n  margin-bottom: 16px;\n  word-break: break-all;\n`\n\nconst TagLink = styled.div`\n  display: inline-block;\n  padding: 9.6px 11.2px;\n  margin-right: 8px;\n  margin-bottom: 8px;\n  border-radius: 50px;\n  background-color: ${props =>\n    props.selected\n      ? props.theme.colors.selectedTagBackground\n      : props.theme.colors.tagBackground};\n  color: ${props =>\n    props.selected\n      ? props.theme.colors.selectedTagText\n      : props.theme.colors.tagText};\n  text-decoration: none;\n  font-size: 14.4px;\n  transition: all 0.2s;\n\n  &:hover {\n    background-color: ${props =>\n      props.selected\n        ? props.theme.colors.hoveredSelectedTagBackground\n        : props.theme.colors.hoveredTagBackground};\n  }\n`\n\nconst spaceToDash = text => {\n  return text\n  // return text.replace(/\\s+/g, \"-\")\n}\n\nconst TagList = ({ tagList, count, selected }) => {\n  if (!tagList) return null\n\n  if (!count) {\n    return (\n      <TagListWrapper>\n        {tagList.map((tag, i) => (\n          <Link key={JSON.stringify({ tag, i })} to={`/tags?q=${tag}`}>\n            <TagLink>{spaceToDash(tag)}</TagLink>\n          </Link>\n        ))}\n      </TagListWrapper>\n    )\n  }\n\n  return (\n    <TagListWrapper>\n      {tagList.map((tag, i) => (\n        <Link\n          key={JSON.stringify({ tag, i })}\n          to={\n            selected === tag.fieldValue ? \"/tags\" : `/tags?q=${tag.fieldValue}`\n          }\n        >\n          <TagLink selected={tag.fieldValue === selected}>\n            {spaceToDash(tag.fieldValue)} ({tag.totalCount})\n          </TagLink>\n        </Link>\n      ))}\n    </TagListWrapper>\n  )\n}\n\nexport default TagList\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport styled from \"styled-components\"\n\nimport Layout from \"components/Layout\"\nimport SEO from \"components/SEO\"\nimport PostList from \"components/PostList\"\nimport Divider from \"components/Divider\"\n\nimport { description, siteUrl } from \"../../blog-config\"\n\nconst Header = styled.div`\n  @media (max-width: 768px) {\n    padding: 0px 15px;\n  }\n`\n\nconst Title = styled.h1`\n  margin-bottom: 15px;\n  line-height: 1.2;\n  font-size: 32px;\n  font-weight: bold;\n  color: ${props => props.theme.colors.text};\n  word-break: break-all;\n`\n\nconst Subtitle = styled.h3`\n  display: inline-block;\n  padding: 2px 3px;\n  margin-top: 32px;\n  margin-bottom: 8px;\n  font-size: 20px;\n  font-weight: bold;\n  background-color: ${props => props.theme.colors.text};\n  color: ${props => props.theme.colors.bodyBackground};\n  letter-spacing: -1px;\n`\n\nconst SeriesInform = styled.div`\n  display: flex;\n  align-items: center;\n  font-size: 16px;\n  color: ${props => props.theme.colors.text};\n\n  & > span {\n    margin: 0 3px;\n  }\n`\n\nconst Date = styled.span`\n  color: ${props => props.theme.colors.tertiaryText};\n  font-weight: lighter;\n`\n\nconst Series = ({ pageContext, data }) => {\n  const seriesName = pageContext.series\n  const posts = data.posts.nodes\n\n  return (\n    <Layout>\n      <SEO\n        title={`SERIES: ${seriesName}`}\n        description={description}\n        url={siteUrl}\n      />\n\n      <Header>\n        <Subtitle> SERIES </Subtitle>\n        <Title> {seriesName} </Title>\n\n        <SeriesInform>\n          <span>{posts.length} Posts</span>\n          <span>·</span>\n          <Date>\n            Last updated on {posts[posts.length - 1].frontmatter.date}\n          </Date>\n        </SeriesInform>\n\n        <Divider />\n      </Header>\n\n      <PostList postList={posts} />\n    </Layout>\n  )\n}\n\nexport default Series\n\nexport const pageQuery = graphql`\n  query BlogSeriesBySeriesName($series: String) {\n    posts: allMarkdownRemark(\n      sort: { order: ASC, fields: [frontmatter___date] }\n      filter: { frontmatter: { series: { eq: $series } } }\n    ) {\n      nodes {\n        excerpt(pruneLength: 200, truncate: true)\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          update(formatString: \"MMM DD, YYYY\")\n          title\n          tags\n          emoji\n        }\n      }\n    }\n  }\n`\n"],"names":["PostListWrapper","styled","div","withConfig","displayName","componentId","PostWrapper","Date","p","props","theme","colors","tertiaryText","SeriesName","text","Excerpt","secondaryText","EmojiWrapper","_ref","postList","postCount","setPostCount","useState","handleMoreLoad","_throttle","document","documentElement","scrollHeight","scrollTop","clientHeight","length","setTimeout","useEffect","window","addEventListener","removeEventListener","React","slice","map","post","i","title","date","tags","emoji","series","frontmatter","excerpt","slug","fields","key","JSON","stringify","Title","size","Link","to","_replace","TagList","tagList","DisplayAds","Divider","mt","mb","TagListWrapper","TagLink","selected","selectedTagBackground","tagBackground","selectedTagText","tagText","hoveredSelectedTagBackground","hoveredTagBackground","count","tag","fieldValue","totalCount","Header","h1","Subtitle","h3","bodyBackground","SeriesInform","span","pageContext","data","seriesName","posts","nodes","Layout","SEO","description","url","siteUrl","PostList"],"sourceRoot":""}