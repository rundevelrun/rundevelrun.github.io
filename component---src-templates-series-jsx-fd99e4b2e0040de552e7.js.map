{"version":3,"file":"component---src-templates-series-jsx-fd99e4b2e0040de552e7.js","mappings":"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","sources":["webpack://gatsby-starter-rundevelrun/./src/components/PostList/index.jsx","webpack://gatsby-starter-rundevelrun/./src/components/TagList/index.jsx","webpack://gatsby-starter-rundevelrun/./src/templates/Series.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\"\r\nimport styled from \"styled-components\"\r\nimport _ from \"lodash\"\r\n\r\nimport { Link } from \"gatsby\"\r\n\r\nimport Title from \"components/Title\"\r\nimport Divider from \"components/Divider\"\r\nimport TagList from \"components/TagList\"\r\nimport DisplayAds from \"../DisplayAd\"\r\n\r\nconst PostListWrapper = styled.div`\r\n  @media (max-width: 768px) {\r\n    padding: 0 10px;\r\n  }\r\n`\r\n\r\nconst PostWrapper = styled.div`\r\n  position: relative;\r\n  top: 0;\r\n  transition: all 0.5s;\r\n\r\n  @media (max-width: 768px) {\r\n    padding: 0 5px;\r\n  }\r\n`\r\n\r\nconst Date = styled.p`\r\n  margin-bottom: 16px;\r\n  font-size: 14.4px;\r\n  color: ${props => props.theme.colors.tertiaryText};\r\n`\r\nconst SeriesName = styled.p`\r\n  font-size: 14.4px;\r\n  float: right;\r\n  color: ${props => props.theme.colors.text};\r\n  text-decoration-line: underline;  \r\n`\r\n\r\nconst Excerpt = styled.p`\r\n  margin-bottom: 32px;\r\n  line-height: 1.7;\r\n  font-size: 15px;\r\n  color: ${props => props.theme.colors.secondaryText};\r\n  word-break: break-all;\r\n`\r\n\r\nconst EmojiWrapper = styled.div`\r\n  float:left;\r\n  margin-right: 15px;  \r\n`\r\n\r\nconst checkIsScrollAtBottom = () => {\r\n  return (\r\n    document.documentElement.scrollHeight -\r\n      document.documentElement.scrollTop <=\r\n    document.documentElement.clientHeight + 100\r\n  )\r\n}\r\n\r\nconst PostList = ({ postList }) => {\r\n  const [postCount, setPostCount] = useState(10)\r\n\r\n  const handleMoreLoad = _.throttle(() => {\r\n    if (checkIsScrollAtBottom() && postCount < postList.length) {\r\n      setTimeout(() => setPostCount(postCount + 10), 300)\r\n    }\r\n  }, 250)\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", handleMoreLoad)\r\n\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", handleMoreLoad)\r\n    }\r\n  }, [postCount, postList])\r\n\r\n  useEffect(() => {\r\n    setPostCount(10)\r\n  }, [postList])\r\n\r\n  return (\r\n    <PostListWrapper>\r\n      {postList.slice(0, postCount).map((post, i) => {\r\n        const { title, date, tags, emoji, series } = post.frontmatter\r\n        const { excerpt } = post\r\n        const { slug } = post.fields\r\n        return (\r\n          <React.Fragment key={JSON.stringify({ slug, date })}>\r\n            <PostWrapper>\r\n              <Title size=\"bg\">\r\n                {emoji ? (\r\n                  <EmojiWrapper>{emoji}</EmojiWrapper>\r\n                ) : ''\r\n                }\r\n                <Link to={slug}>{title}</Link>\r\n              </Title>\r\n              <Link to={`/series/${_.replace(series, /\\s/g, \"-\")}`}>\r\n              <SeriesName>{series}</SeriesName>\r\n              </Link>\r\n              <Date>{date}</Date>\r\n              <Excerpt>{excerpt}</Excerpt>\r\n              <TagList tagList={tags} />\r\n            </PostWrapper>\r\n            {\r\n              (i == 0 || i==2) && (\r\n                <DisplayAds />\r\n              )\r\n            }\r\n            {postCount - 1 !== i && postList.length - 1 !== i && (\r\n              <Divider mt=\"48px\" mb=\"32px\" />\r\n            )}\r\n          </React.Fragment>\r\n        )\r\n      })}\r\n    </PostListWrapper>\r\n  )\r\n}\r\n\r\nexport default PostList\r\n","import React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { Link } from \"gatsby\"\r\n\r\nconst TagListWrapper = styled.div`\r\n  margin-bottom: 16px;\r\n  word-break: break-all;\r\n`\r\n\r\nconst TagLink = styled.div`\r\n  display: inline-block;\r\n  padding: 9.6px 11.2px;\r\n  margin-right: 8px;\r\n  margin-bottom: 8px;\r\n  border-radius: 50px;\r\n  background-color: ${props =>\r\n    props.selected\r\n      ? props.theme.colors.selectedTagBackground\r\n      : props.theme.colors.tagBackground};\r\n  color: ${props =>\r\n    props.selected\r\n      ? props.theme.colors.selectedTagText\r\n      : props.theme.colors.tagText};\r\n  text-decoration: none;\r\n  font-size: 14.4px;\r\n  transition: all 0.2s;\r\n\r\n  &:hover {\r\n    background-color: ${props =>\r\n      props.selected\r\n        ? props.theme.colors.hoveredSelectedTagBackground\r\n        : props.theme.colors.hoveredTagBackground};\r\n  }\r\n`\r\n\r\nconst spaceToDash = text => {\r\n  return text\r\n  // return text.replace(/\\s+/g, \"-\")\r\n}\r\n\r\nconst TagList = ({ tagList, count, selected }) => {\r\n  if (!tagList) return null\r\n\r\n  if (!count) {\r\n    return (\r\n      <TagListWrapper>\r\n        {tagList.map((tag, i) => (\r\n          <Link key={JSON.stringify({ tag, i })} to={`/tags?q=${tag}`}>\r\n            <TagLink>{spaceToDash(tag)}</TagLink>\r\n          </Link>\r\n        ))}\r\n      </TagListWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <TagListWrapper>\r\n      {tagList.map((tag, i) => (\r\n        <Link\r\n          key={JSON.stringify({ tag, i })}\r\n          to={\r\n            selected === tag.fieldValue ? \"/tags\" : `/tags?q=${tag.fieldValue}`\r\n          }\r\n        >\r\n          <TagLink selected={tag.fieldValue === selected}>\r\n            {spaceToDash(tag.fieldValue)} ({tag.totalCount})\r\n          </TagLink>\r\n        </Link>\r\n      ))}\r\n    </TagListWrapper>\r\n  )\r\n}\r\n\r\nexport default TagList\r\n","import React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\n\r\nimport styled from \"styled-components\"\r\n\r\nimport Layout from \"components/Layout\"\r\nimport SEO from \"components/SEO\"\r\nimport PostList from \"components/PostList\"\r\nimport Divider from \"components/Divider\"\r\n\r\nimport { description, siteUrl } from \"../../blog-config\"\r\n\r\nconst Header = styled.div`\r\n  @media (max-width: 768px) {\r\n    padding: 0px 15px;\r\n  }\r\n`\r\n\r\nconst Title = styled.h1`\r\n  margin-bottom: 15px;\r\n  line-height: 1.2;\r\n  font-size: 32px;\r\n  font-weight: bold;\r\n  color: ${props => props.theme.colors.text};\r\n  word-break: break-all;\r\n`\r\n\r\nconst Subtitle = styled.h3`\r\n  display: inline-block;\r\n  padding: 2px 3px;\r\n  margin-top: 32px;\r\n  margin-bottom: 8px;\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  background-color: ${props => props.theme.colors.text};\r\n  color: ${props => props.theme.colors.bodyBackground};\r\n  letter-spacing: -1px;\r\n`\r\n\r\nconst SeriesInform = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 16px;\r\n  color: ${props => props.theme.colors.text};\r\n\r\n  & > span {\r\n    margin: 0 3px;\r\n  }\r\n`\r\n\r\nconst Date = styled.span`\r\n  color: ${props => props.theme.colors.tertiaryText};\r\n  font-weight: lighter;\r\n`\r\n\r\nconst Series = ({ pageContext, data }) => {\r\n  const seriesName = pageContext.series\r\n  const posts = data.posts.nodes\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO\r\n        title={`SERIES: ${seriesName}`}\r\n        description={description}\r\n        url={siteUrl}\r\n      />\r\n\r\n      <Header>\r\n        <Subtitle> SERIES </Subtitle>\r\n        <Title> {seriesName} </Title>\r\n\r\n        <SeriesInform>\r\n          <span>{posts.length} Posts</span>\r\n          <span>·</span>\r\n          <Date>\r\n            Last updated on {posts[posts.length - 1].frontmatter.date}\r\n          </Date>\r\n        </SeriesInform>\r\n\r\n        <Divider />\r\n      </Header>\r\n\r\n      <PostList postList={posts} />\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default Series\r\n\r\nexport const pageQuery = graphql`\r\n  query BlogSeriesBySeriesName($series: String) {\r\n    posts: allMarkdownRemark(\r\n      sort: { order: ASC, fields: [frontmatter___date] }\r\n      filter: { frontmatter: { series: { eq: $series } } }\r\n    ) {\r\n      nodes {\r\n        excerpt(pruneLength: 200, truncate: true)\r\n        fields {\r\n          slug\r\n        }\r\n        frontmatter {\r\n          date(formatString: \"MMMM DD, YYYY\")\r\n          update(formatString: \"MMM DD, YYYY\")\r\n          title\r\n          tags\r\n          emoji\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["PostListWrapper","styled","div","withConfig","displayName","componentId","PostWrapper","Date","p","props","theme","colors","tertiaryText","SeriesName","text","Excerpt","secondaryText","EmojiWrapper","_ref","postList","postCount","setPostCount","useState","handleMoreLoad","_throttle","document","documentElement","scrollHeight","scrollTop","clientHeight","length","setTimeout","useEffect","window","addEventListener","removeEventListener","React","slice","map","post","i","title","date","tags","emoji","series","frontmatter","excerpt","slug","fields","key","JSON","stringify","Title","size","Link","to","_replace","TagList","tagList","DisplayAds","Divider","mt","mb","TagListWrapper","TagLink","selected","selectedTagBackground","tagBackground","selectedTagText","tagText","hoveredSelectedTagBackground","hoveredTagBackground","count","tag","fieldValue","totalCount","Header","h1","Subtitle","h3","bodyBackground","SeriesInform","span","pageContext","data","seriesName","posts","nodes","Layout","SEO","description","url","siteUrl","PostList"],"sourceRoot":""}